/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package samsarago

import (
	"encoding/json"
)

// checks if the UserRoleAssignmentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserRoleAssignmentRequest{}

// UserRoleAssignmentRequest A role that applies to a user. If the role has a `tagId`, then the role applies for that tag. If there is no `tagId`, then the role applies at the organizational level. A user may have many tag-specific roles, but may only have one organizational role. If the organizational level role has higher privileges than a tag-specific role, then the organizational role privileges will take precedence.
type UserRoleAssignmentRequest struct {
	// The unique ID for the role.
	RoleId *string `json:"roleId,omitempty"`
	// ID of the tag this role applies to.
	TagId *string `json:"tagId,omitempty"`
}

// NewUserRoleAssignmentRequest instantiates a new UserRoleAssignmentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserRoleAssignmentRequest() *UserRoleAssignmentRequest {
	this := UserRoleAssignmentRequest{}
	return &this
}

// NewUserRoleAssignmentRequestWithDefaults instantiates a new UserRoleAssignmentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserRoleAssignmentRequestWithDefaults() *UserRoleAssignmentRequest {
	this := UserRoleAssignmentRequest{}
	return &this
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *UserRoleAssignmentRequest) GetRoleId() string {
	if o == nil || IsNil(o.RoleId) {
		var ret string
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleAssignmentRequest) GetRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *UserRoleAssignmentRequest) HasRoleId() bool {
	if o != nil && !IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given string and assigns it to the RoleId field.
func (o *UserRoleAssignmentRequest) SetRoleId(v string) {
	o.RoleId = &v
}

// GetTagId returns the TagId field value if set, zero value otherwise.
func (o *UserRoleAssignmentRequest) GetTagId() string {
	if o == nil || IsNil(o.TagId) {
		var ret string
		return ret
	}
	return *o.TagId
}

// GetTagIdOk returns a tuple with the TagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleAssignmentRequest) GetTagIdOk() (*string, bool) {
	if o == nil || IsNil(o.TagId) {
		return nil, false
	}
	return o.TagId, true
}

// HasTagId returns a boolean if a field has been set.
func (o *UserRoleAssignmentRequest) HasTagId() bool {
	if o != nil && !IsNil(o.TagId) {
		return true
	}

	return false
}

// SetTagId gets a reference to the given string and assigns it to the TagId field.
func (o *UserRoleAssignmentRequest) SetTagId(v string) {
	o.TagId = &v
}

func (o UserRoleAssignmentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserRoleAssignmentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoleId) {
		toSerialize["roleId"] = o.RoleId
	}
	if !IsNil(o.TagId) {
		toSerialize["tagId"] = o.TagId
	}
	return toSerialize, nil
}

type NullableUserRoleAssignmentRequest struct {
	value *UserRoleAssignmentRequest
	isSet bool
}

func (v NullableUserRoleAssignmentRequest) Get() *UserRoleAssignmentRequest {
	return v.value
}

func (v *NullableUserRoleAssignmentRequest) Set(val *UserRoleAssignmentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRoleAssignmentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRoleAssignmentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRoleAssignmentRequest(val *UserRoleAssignmentRequest) *NullableUserRoleAssignmentRequest {
	return &NullableUserRoleAssignmentRequest{value: val, isSet: true}
}

func (v NullableUserRoleAssignmentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRoleAssignmentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


