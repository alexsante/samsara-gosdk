/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package samsarago

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Vehicle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vehicle{}

// Vehicle The vehicle object.
type Vehicle struct {
	AuxInputType1 *VehicleAuxInputType `json:"auxInputType1,omitempty"`
	AuxInputType2 *VehicleAuxInputType `json:"auxInputType2,omitempty"`
	// The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
	ExternalIds *map[string]string `json:"externalIds,omitempty"`
	HarshAccelerationSettingType *VehicleHarshAccelerationSettingType `json:"harshAccelerationSettingType,omitempty"`
	// The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed.
	Id string `json:"id"`
	// The license plate of the Vehicle. **By default**: empty. Can be set or updated through the Samsara Dashboard or the API at any time.
	LicensePlate *string `json:"licensePlate,omitempty"`
	// The Vehicle’s manufacturing make. Automatically read from the engine computer if available. Empty if not available. Cannot be manually set.
	Make *string `json:"make,omitempty"`
	// The Vehicle’s manufacturing model. Automatically read from the engine computer if available. Empty if not available. Cannot be manually set.
	Model *string `json:"model,omitempty"`
	// The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
	Name *string `json:"name,omitempty"`
	// These are generic notes about the Vehicle. Empty by default. Can be set or updated through the Samsara Dashboard or the API at any time.
	Notes *string `json:"notes,omitempty"`
	StaticAssignedDriver *DriverTinyResponse `json:"staticAssignedDriver,omitempty"`
	// The list of [tags](https://kb.samsara.com/hc/en-us/articles/360026674631-Using-Tags-and-Tag-Nesting) associated with the Vehicle. **By default**: empty. Can be set or updated through the Samsara Dashboard or the API at any time.
	Tags []TagTinyResponse `json:"tags,omitempty"`
	// The VIN of the Vehicle. Most of the time, this will be automatically read from the engine computer by the Samsara Vehicle Gateway. It will be empty if it cannot be read. It can be set or updated through the Samsara Dashboard or the API at any time.
	Vin *string `json:"vin,omitempty"`
	// The Vehicle’s manufacturing model. Automatically read from the engine computer if available. Empty if not available. Cannot be manually set.
	Year *string `json:"year,omitempty"`
}

type _Vehicle Vehicle

// NewVehicle instantiates a new Vehicle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicle(id string) *Vehicle {
	this := Vehicle{}
	this.Id = id
	var notes string = ""
	this.Notes = &notes
	return &this
}

// NewVehicleWithDefaults instantiates a new Vehicle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleWithDefaults() *Vehicle {
	this := Vehicle{}
	var notes string = ""
	this.Notes = &notes
	return &this
}

// GetAuxInputType1 returns the AuxInputType1 field value if set, zero value otherwise.
func (o *Vehicle) GetAuxInputType1() VehicleAuxInputType {
	if o == nil || IsNil(o.AuxInputType1) {
		var ret VehicleAuxInputType
		return ret
	}
	return *o.AuxInputType1
}

// GetAuxInputType1Ok returns a tuple with the AuxInputType1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetAuxInputType1Ok() (*VehicleAuxInputType, bool) {
	if o == nil || IsNil(o.AuxInputType1) {
		return nil, false
	}
	return o.AuxInputType1, true
}

// HasAuxInputType1 returns a boolean if a field has been set.
func (o *Vehicle) HasAuxInputType1() bool {
	if o != nil && !IsNil(o.AuxInputType1) {
		return true
	}

	return false
}

// SetAuxInputType1 gets a reference to the given VehicleAuxInputType and assigns it to the AuxInputType1 field.
func (o *Vehicle) SetAuxInputType1(v VehicleAuxInputType) {
	o.AuxInputType1 = &v
}

// GetAuxInputType2 returns the AuxInputType2 field value if set, zero value otherwise.
func (o *Vehicle) GetAuxInputType2() VehicleAuxInputType {
	if o == nil || IsNil(o.AuxInputType2) {
		var ret VehicleAuxInputType
		return ret
	}
	return *o.AuxInputType2
}

// GetAuxInputType2Ok returns a tuple with the AuxInputType2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetAuxInputType2Ok() (*VehicleAuxInputType, bool) {
	if o == nil || IsNil(o.AuxInputType2) {
		return nil, false
	}
	return o.AuxInputType2, true
}

// HasAuxInputType2 returns a boolean if a field has been set.
func (o *Vehicle) HasAuxInputType2() bool {
	if o != nil && !IsNil(o.AuxInputType2) {
		return true
	}

	return false
}

// SetAuxInputType2 gets a reference to the given VehicleAuxInputType and assigns it to the AuxInputType2 field.
func (o *Vehicle) SetAuxInputType2(v VehicleAuxInputType) {
	o.AuxInputType2 = &v
}

// GetExternalIds returns the ExternalIds field value if set, zero value otherwise.
func (o *Vehicle) GetExternalIds() map[string]string {
	if o == nil || IsNil(o.ExternalIds) {
		var ret map[string]string
		return ret
	}
	return *o.ExternalIds
}

// GetExternalIdsOk returns a tuple with the ExternalIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetExternalIdsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ExternalIds) {
		return nil, false
	}
	return o.ExternalIds, true
}

// HasExternalIds returns a boolean if a field has been set.
func (o *Vehicle) HasExternalIds() bool {
	if o != nil && !IsNil(o.ExternalIds) {
		return true
	}

	return false
}

// SetExternalIds gets a reference to the given map[string]string and assigns it to the ExternalIds field.
func (o *Vehicle) SetExternalIds(v map[string]string) {
	o.ExternalIds = &v
}

// GetHarshAccelerationSettingType returns the HarshAccelerationSettingType field value if set, zero value otherwise.
func (o *Vehicle) GetHarshAccelerationSettingType() VehicleHarshAccelerationSettingType {
	if o == nil || IsNil(o.HarshAccelerationSettingType) {
		var ret VehicleHarshAccelerationSettingType
		return ret
	}
	return *o.HarshAccelerationSettingType
}

// GetHarshAccelerationSettingTypeOk returns a tuple with the HarshAccelerationSettingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetHarshAccelerationSettingTypeOk() (*VehicleHarshAccelerationSettingType, bool) {
	if o == nil || IsNil(o.HarshAccelerationSettingType) {
		return nil, false
	}
	return o.HarshAccelerationSettingType, true
}

// HasHarshAccelerationSettingType returns a boolean if a field has been set.
func (o *Vehicle) HasHarshAccelerationSettingType() bool {
	if o != nil && !IsNil(o.HarshAccelerationSettingType) {
		return true
	}

	return false
}

// SetHarshAccelerationSettingType gets a reference to the given VehicleHarshAccelerationSettingType and assigns it to the HarshAccelerationSettingType field.
func (o *Vehicle) SetHarshAccelerationSettingType(v VehicleHarshAccelerationSettingType) {
	o.HarshAccelerationSettingType = &v
}

// GetId returns the Id field value
func (o *Vehicle) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Vehicle) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Vehicle) SetId(v string) {
	o.Id = v
}

// GetLicensePlate returns the LicensePlate field value if set, zero value otherwise.
func (o *Vehicle) GetLicensePlate() string {
	if o == nil || IsNil(o.LicensePlate) {
		var ret string
		return ret
	}
	return *o.LicensePlate
}

// GetLicensePlateOk returns a tuple with the LicensePlate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetLicensePlateOk() (*string, bool) {
	if o == nil || IsNil(o.LicensePlate) {
		return nil, false
	}
	return o.LicensePlate, true
}

// HasLicensePlate returns a boolean if a field has been set.
func (o *Vehicle) HasLicensePlate() bool {
	if o != nil && !IsNil(o.LicensePlate) {
		return true
	}

	return false
}

// SetLicensePlate gets a reference to the given string and assigns it to the LicensePlate field.
func (o *Vehicle) SetLicensePlate(v string) {
	o.LicensePlate = &v
}

// GetMake returns the Make field value if set, zero value otherwise.
func (o *Vehicle) GetMake() string {
	if o == nil || IsNil(o.Make) {
		var ret string
		return ret
	}
	return *o.Make
}

// GetMakeOk returns a tuple with the Make field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetMakeOk() (*string, bool) {
	if o == nil || IsNil(o.Make) {
		return nil, false
	}
	return o.Make, true
}

// HasMake returns a boolean if a field has been set.
func (o *Vehicle) HasMake() bool {
	if o != nil && !IsNil(o.Make) {
		return true
	}

	return false
}

// SetMake gets a reference to the given string and assigns it to the Make field.
func (o *Vehicle) SetMake(v string) {
	o.Make = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *Vehicle) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *Vehicle) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *Vehicle) SetModel(v string) {
	o.Model = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Vehicle) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Vehicle) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Vehicle) SetName(v string) {
	o.Name = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Vehicle) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Vehicle) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Vehicle) SetNotes(v string) {
	o.Notes = &v
}

// GetStaticAssignedDriver returns the StaticAssignedDriver field value if set, zero value otherwise.
func (o *Vehicle) GetStaticAssignedDriver() DriverTinyResponse {
	if o == nil || IsNil(o.StaticAssignedDriver) {
		var ret DriverTinyResponse
		return ret
	}
	return *o.StaticAssignedDriver
}

// GetStaticAssignedDriverOk returns a tuple with the StaticAssignedDriver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetStaticAssignedDriverOk() (*DriverTinyResponse, bool) {
	if o == nil || IsNil(o.StaticAssignedDriver) {
		return nil, false
	}
	return o.StaticAssignedDriver, true
}

// HasStaticAssignedDriver returns a boolean if a field has been set.
func (o *Vehicle) HasStaticAssignedDriver() bool {
	if o != nil && !IsNil(o.StaticAssignedDriver) {
		return true
	}

	return false
}

// SetStaticAssignedDriver gets a reference to the given DriverTinyResponse and assigns it to the StaticAssignedDriver field.
func (o *Vehicle) SetStaticAssignedDriver(v DriverTinyResponse) {
	o.StaticAssignedDriver = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Vehicle) GetTags() []TagTinyResponse {
	if o == nil || IsNil(o.Tags) {
		var ret []TagTinyResponse
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetTagsOk() ([]TagTinyResponse, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Vehicle) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagTinyResponse and assigns it to the Tags field.
func (o *Vehicle) SetTags(v []TagTinyResponse) {
	o.Tags = v
}

// GetVin returns the Vin field value if set, zero value otherwise.
func (o *Vehicle) GetVin() string {
	if o == nil || IsNil(o.Vin) {
		var ret string
		return ret
	}
	return *o.Vin
}

// GetVinOk returns a tuple with the Vin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetVinOk() (*string, bool) {
	if o == nil || IsNil(o.Vin) {
		return nil, false
	}
	return o.Vin, true
}

// HasVin returns a boolean if a field has been set.
func (o *Vehicle) HasVin() bool {
	if o != nil && !IsNil(o.Vin) {
		return true
	}

	return false
}

// SetVin gets a reference to the given string and assigns it to the Vin field.
func (o *Vehicle) SetVin(v string) {
	o.Vin = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *Vehicle) GetYear() string {
	if o == nil || IsNil(o.Year) {
		var ret string
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetYearOk() (*string, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *Vehicle) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given string and assigns it to the Year field.
func (o *Vehicle) SetYear(v string) {
	o.Year = &v
}

func (o Vehicle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vehicle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuxInputType1) {
		toSerialize["auxInputType1"] = o.AuxInputType1
	}
	if !IsNil(o.AuxInputType2) {
		toSerialize["auxInputType2"] = o.AuxInputType2
	}
	if !IsNil(o.ExternalIds) {
		toSerialize["externalIds"] = o.ExternalIds
	}
	if !IsNil(o.HarshAccelerationSettingType) {
		toSerialize["harshAccelerationSettingType"] = o.HarshAccelerationSettingType
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.LicensePlate) {
		toSerialize["licensePlate"] = o.LicensePlate
	}
	if !IsNil(o.Make) {
		toSerialize["make"] = o.Make
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.StaticAssignedDriver) {
		toSerialize["staticAssignedDriver"] = o.StaticAssignedDriver
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Vin) {
		toSerialize["vin"] = o.Vin
	}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	return toSerialize, nil
}

func (o *Vehicle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVehicle := _Vehicle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVehicle)

	if err != nil {
		return err
	}

	*o = Vehicle(varVehicle)

	return err
}

type NullableVehicle struct {
	value *Vehicle
	isSet bool
}

func (v NullableVehicle) Get() *Vehicle {
	return v.value
}

func (v *NullableVehicle) Set(val *Vehicle) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicle) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicle(val *Vehicle) *NullableVehicle {
	return &NullableVehicle{value: val, isSet: true}
}

func (v NullableVehicle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


