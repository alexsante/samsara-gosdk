/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AddressGeofence type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressGeofence{}

// AddressGeofence The geofence that defines this address and its bounds. This can either be a circle or a polygon, but not both.
type AddressGeofence struct {
	Circle *AddressGeofenceCircle `json:"circle,omitempty"`
	Polygon *AddressGeofencePolygon `json:"polygon,omitempty"`
}

// NewAddressGeofence instantiates a new AddressGeofence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressGeofence() *AddressGeofence {
	this := AddressGeofence{}
	return &this
}

// NewAddressGeofenceWithDefaults instantiates a new AddressGeofence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressGeofenceWithDefaults() *AddressGeofence {
	this := AddressGeofence{}
	return &this
}

// GetCircle returns the Circle field value if set, zero value otherwise.
func (o *AddressGeofence) GetCircle() AddressGeofenceCircle {
	if o == nil || IsNil(o.Circle) {
		var ret AddressGeofenceCircle
		return ret
	}
	return *o.Circle
}

// GetCircleOk returns a tuple with the Circle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressGeofence) GetCircleOk() (*AddressGeofenceCircle, bool) {
	if o == nil || IsNil(o.Circle) {
		return nil, false
	}
	return o.Circle, true
}

// HasCircle returns a boolean if a field has been set.
func (o *AddressGeofence) HasCircle() bool {
	if o != nil && !IsNil(o.Circle) {
		return true
	}

	return false
}

// SetCircle gets a reference to the given AddressGeofenceCircle and assigns it to the Circle field.
func (o *AddressGeofence) SetCircle(v AddressGeofenceCircle) {
	o.Circle = &v
}

// GetPolygon returns the Polygon field value if set, zero value otherwise.
func (o *AddressGeofence) GetPolygon() AddressGeofencePolygon {
	if o == nil || IsNil(o.Polygon) {
		var ret AddressGeofencePolygon
		return ret
	}
	return *o.Polygon
}

// GetPolygonOk returns a tuple with the Polygon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressGeofence) GetPolygonOk() (*AddressGeofencePolygon, bool) {
	if o == nil || IsNil(o.Polygon) {
		return nil, false
	}
	return o.Polygon, true
}

// HasPolygon returns a boolean if a field has been set.
func (o *AddressGeofence) HasPolygon() bool {
	if o != nil && !IsNil(o.Polygon) {
		return true
	}

	return false
}

// SetPolygon gets a reference to the given AddressGeofencePolygon and assigns it to the Polygon field.
func (o *AddressGeofence) SetPolygon(v AddressGeofencePolygon) {
	o.Polygon = &v
}

func (o AddressGeofence) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressGeofence) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Circle) {
		toSerialize["circle"] = o.Circle
	}
	if !IsNil(o.Polygon) {
		toSerialize["polygon"] = o.Polygon
	}
	return toSerialize, nil
}

type NullableAddressGeofence struct {
	value *AddressGeofence
	isSet bool
}

func (v NullableAddressGeofence) Get() *AddressGeofence {
	return v.value
}

func (v *NullableAddressGeofence) Set(val *AddressGeofence) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressGeofence) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressGeofence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressGeofence(val *AddressGeofence) *NullableAddressGeofence {
	return &NullableAddressGeofence{value: val, isSet: true}
}

func (v NullableAddressGeofence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressGeofence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


