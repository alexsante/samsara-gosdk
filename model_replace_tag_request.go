/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReplaceTagRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplaceTagRequest{}

// ReplaceTagRequest struct for ReplaceTagRequest
type ReplaceTagRequest struct {
	// The addresses that belong to this tag.
	Addresses []string `json:"addresses,omitempty"`
	// The trailers, unpowered, and powered assets that belong to this tag.
	Assets []string `json:"assets,omitempty"`
	// The drivers that belong to this tag.
	Drivers []string `json:"drivers,omitempty"`
	// The machines that belong to this tag.
	Machines []string `json:"machines,omitempty"`
	// Name of this tag.
	Name *string `json:"name,omitempty"`
	// If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be omitted.
	ParentTagId *string `json:"parentTagId,omitempty"`
	// The sensors that belong to this tag.
	Sensors []string `json:"sensors,omitempty"`
	// The vehicles that belong to this tag.
	Vehicles []string `json:"vehicles,omitempty"`
}

// NewReplaceTagRequest instantiates a new ReplaceTagRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceTagRequest() *ReplaceTagRequest {
	this := ReplaceTagRequest{}
	return &this
}

// NewReplaceTagRequestWithDefaults instantiates a new ReplaceTagRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceTagRequestWithDefaults() *ReplaceTagRequest {
	this := ReplaceTagRequest{}
	return &this
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *ReplaceTagRequest) GetAddresses() []string {
	if o == nil || IsNil(o.Addresses) {
		var ret []string
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceTagRequest) GetAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *ReplaceTagRequest) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []string and assigns it to the Addresses field.
func (o *ReplaceTagRequest) SetAddresses(v []string) {
	o.Addresses = v
}

// GetAssets returns the Assets field value if set, zero value otherwise.
func (o *ReplaceTagRequest) GetAssets() []string {
	if o == nil || IsNil(o.Assets) {
		var ret []string
		return ret
	}
	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceTagRequest) GetAssetsOk() ([]string, bool) {
	if o == nil || IsNil(o.Assets) {
		return nil, false
	}
	return o.Assets, true
}

// HasAssets returns a boolean if a field has been set.
func (o *ReplaceTagRequest) HasAssets() bool {
	if o != nil && !IsNil(o.Assets) {
		return true
	}

	return false
}

// SetAssets gets a reference to the given []string and assigns it to the Assets field.
func (o *ReplaceTagRequest) SetAssets(v []string) {
	o.Assets = v
}

// GetDrivers returns the Drivers field value if set, zero value otherwise.
func (o *ReplaceTagRequest) GetDrivers() []string {
	if o == nil || IsNil(o.Drivers) {
		var ret []string
		return ret
	}
	return o.Drivers
}

// GetDriversOk returns a tuple with the Drivers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceTagRequest) GetDriversOk() ([]string, bool) {
	if o == nil || IsNil(o.Drivers) {
		return nil, false
	}
	return o.Drivers, true
}

// HasDrivers returns a boolean if a field has been set.
func (o *ReplaceTagRequest) HasDrivers() bool {
	if o != nil && !IsNil(o.Drivers) {
		return true
	}

	return false
}

// SetDrivers gets a reference to the given []string and assigns it to the Drivers field.
func (o *ReplaceTagRequest) SetDrivers(v []string) {
	o.Drivers = v
}

// GetMachines returns the Machines field value if set, zero value otherwise.
func (o *ReplaceTagRequest) GetMachines() []string {
	if o == nil || IsNil(o.Machines) {
		var ret []string
		return ret
	}
	return o.Machines
}

// GetMachinesOk returns a tuple with the Machines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceTagRequest) GetMachinesOk() ([]string, bool) {
	if o == nil || IsNil(o.Machines) {
		return nil, false
	}
	return o.Machines, true
}

// HasMachines returns a boolean if a field has been set.
func (o *ReplaceTagRequest) HasMachines() bool {
	if o != nil && !IsNil(o.Machines) {
		return true
	}

	return false
}

// SetMachines gets a reference to the given []string and assigns it to the Machines field.
func (o *ReplaceTagRequest) SetMachines(v []string) {
	o.Machines = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ReplaceTagRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceTagRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ReplaceTagRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ReplaceTagRequest) SetName(v string) {
	o.Name = &v
}

// GetParentTagId returns the ParentTagId field value if set, zero value otherwise.
func (o *ReplaceTagRequest) GetParentTagId() string {
	if o == nil || IsNil(o.ParentTagId) {
		var ret string
		return ret
	}
	return *o.ParentTagId
}

// GetParentTagIdOk returns a tuple with the ParentTagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceTagRequest) GetParentTagIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentTagId) {
		return nil, false
	}
	return o.ParentTagId, true
}

// HasParentTagId returns a boolean if a field has been set.
func (o *ReplaceTagRequest) HasParentTagId() bool {
	if o != nil && !IsNil(o.ParentTagId) {
		return true
	}

	return false
}

// SetParentTagId gets a reference to the given string and assigns it to the ParentTagId field.
func (o *ReplaceTagRequest) SetParentTagId(v string) {
	o.ParentTagId = &v
}

// GetSensors returns the Sensors field value if set, zero value otherwise.
func (o *ReplaceTagRequest) GetSensors() []string {
	if o == nil || IsNil(o.Sensors) {
		var ret []string
		return ret
	}
	return o.Sensors
}

// GetSensorsOk returns a tuple with the Sensors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceTagRequest) GetSensorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Sensors) {
		return nil, false
	}
	return o.Sensors, true
}

// HasSensors returns a boolean if a field has been set.
func (o *ReplaceTagRequest) HasSensors() bool {
	if o != nil && !IsNil(o.Sensors) {
		return true
	}

	return false
}

// SetSensors gets a reference to the given []string and assigns it to the Sensors field.
func (o *ReplaceTagRequest) SetSensors(v []string) {
	o.Sensors = v
}

// GetVehicles returns the Vehicles field value if set, zero value otherwise.
func (o *ReplaceTagRequest) GetVehicles() []string {
	if o == nil || IsNil(o.Vehicles) {
		var ret []string
		return ret
	}
	return o.Vehicles
}

// GetVehiclesOk returns a tuple with the Vehicles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceTagRequest) GetVehiclesOk() ([]string, bool) {
	if o == nil || IsNil(o.Vehicles) {
		return nil, false
	}
	return o.Vehicles, true
}

// HasVehicles returns a boolean if a field has been set.
func (o *ReplaceTagRequest) HasVehicles() bool {
	if o != nil && !IsNil(o.Vehicles) {
		return true
	}

	return false
}

// SetVehicles gets a reference to the given []string and assigns it to the Vehicles field.
func (o *ReplaceTagRequest) SetVehicles(v []string) {
	o.Vehicles = v
}

func (o ReplaceTagRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplaceTagRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !IsNil(o.Assets) {
		toSerialize["assets"] = o.Assets
	}
	if !IsNil(o.Drivers) {
		toSerialize["drivers"] = o.Drivers
	}
	if !IsNil(o.Machines) {
		toSerialize["machines"] = o.Machines
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ParentTagId) {
		toSerialize["parentTagId"] = o.ParentTagId
	}
	if !IsNil(o.Sensors) {
		toSerialize["sensors"] = o.Sensors
	}
	if !IsNil(o.Vehicles) {
		toSerialize["vehicles"] = o.Vehicles
	}
	return toSerialize, nil
}

type NullableReplaceTagRequest struct {
	value *ReplaceTagRequest
	isSet bool
}

func (v NullableReplaceTagRequest) Get() *ReplaceTagRequest {
	return v.value
}

func (v *NullableReplaceTagRequest) Set(val *ReplaceTagRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceTagRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceTagRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceTagRequest(val *ReplaceTagRequest) *NullableReplaceTagRequest {
	return &NullableReplaceTagRequest{value: val, isSet: true}
}

func (v NullableReplaceTagRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceTagRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


