/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StandardErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StandardErrorResponse{}

// StandardErrorResponse Error response
type StandardErrorResponse struct {
	// The message of the error.
	Message *string `json:"message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"requestId,omitempty"`
}

// NewStandardErrorResponse instantiates a new StandardErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandardErrorResponse() *StandardErrorResponse {
	this := StandardErrorResponse{}
	return &this
}

// NewStandardErrorResponseWithDefaults instantiates a new StandardErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandardErrorResponseWithDefaults() *StandardErrorResponse {
	this := StandardErrorResponse{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *StandardErrorResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandardErrorResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *StandardErrorResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *StandardErrorResponse) SetMessage(v string) {
	o.Message = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *StandardErrorResponse) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandardErrorResponse) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *StandardErrorResponse) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *StandardErrorResponse) SetRequestId(v string) {
	o.RequestId = &v
}

func (o StandardErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StandardErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.RequestId) {
		toSerialize["requestId"] = o.RequestId
	}
	return toSerialize, nil
}

type NullableStandardErrorResponse struct {
	value *StandardErrorResponse
	isSet bool
}

func (v NullableStandardErrorResponse) Get() *StandardErrorResponse {
	return v.value
}

func (v *NullableStandardErrorResponse) Set(val *StandardErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStandardErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStandardErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandardErrorResponse(val *StandardErrorResponse) *NullableStandardErrorResponse {
	return &NullableStandardErrorResponse{value: val, isSet: true}
}

func (v NullableStandardErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandardErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


