/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package samsarago

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VehicleStatsListResponseDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VehicleStatsListResponseDataInner{}

// VehicleStatsListResponseDataInner A vehicle and its list of stat events.
type VehicleStatsListResponseDataInner struct {
	// A list of engine state events for the given vehicle.
	EngineStates []VehicleStatsEngineState `json:"engineStates,omitempty"`
	// A list of fuel percentage readings for the given vehicle.
	FuelPercents []VehicleStatsFuelPercent `json:"fuelPercents,omitempty"`
	// A list of GPS distance events for the given vehicle.
	GpsDistanceMeters []VehicleStatsGpsDistanceMeters `json:"gpsDistanceMeters,omitempty"`
	// A list of GPS odometer events for the given vehicle.
	GpsOdometerMeters []VehicleStatsGpsOdometerMeters `json:"gpsOdometerMeters,omitempty"`
	// The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed.
	Id string `json:"id"`
	// The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsaraâ€™s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
	Name string `json:"name"`
	// A list of OBD engine seconds readings for the given vehicle.
	ObdEngineSeconds []VehicleStatsObdEngineSeconds `json:"obdEngineSeconds,omitempty"`
	// A list of OBD odometer readings for the given vehicle.
	ObdOdometerMeters []VehicleStatsObdOdometerMeters `json:"obdOdometerMeters,omitempty"`
}

type _VehicleStatsListResponseDataInner VehicleStatsListResponseDataInner

// NewVehicleStatsListResponseDataInner instantiates a new VehicleStatsListResponseDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicleStatsListResponseDataInner(id string, name string) *VehicleStatsListResponseDataInner {
	this := VehicleStatsListResponseDataInner{}
	this.Id = id
	this.Name = name
	return &this
}

// NewVehicleStatsListResponseDataInnerWithDefaults instantiates a new VehicleStatsListResponseDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleStatsListResponseDataInnerWithDefaults() *VehicleStatsListResponseDataInner {
	this := VehicleStatsListResponseDataInner{}
	return &this
}

// GetEngineStates returns the EngineStates field value if set, zero value otherwise.
func (o *VehicleStatsListResponseDataInner) GetEngineStates() []VehicleStatsEngineState {
	if o == nil || IsNil(o.EngineStates) {
		var ret []VehicleStatsEngineState
		return ret
	}
	return o.EngineStates
}

// GetEngineStatesOk returns a tuple with the EngineStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsListResponseDataInner) GetEngineStatesOk() ([]VehicleStatsEngineState, bool) {
	if o == nil || IsNil(o.EngineStates) {
		return nil, false
	}
	return o.EngineStates, true
}

// HasEngineStates returns a boolean if a field has been set.
func (o *VehicleStatsListResponseDataInner) HasEngineStates() bool {
	if o != nil && !IsNil(o.EngineStates) {
		return true
	}

	return false
}

// SetEngineStates gets a reference to the given []VehicleStatsEngineState and assigns it to the EngineStates field.
func (o *VehicleStatsListResponseDataInner) SetEngineStates(v []VehicleStatsEngineState) {
	o.EngineStates = v
}

// GetFuelPercents returns the FuelPercents field value if set, zero value otherwise.
func (o *VehicleStatsListResponseDataInner) GetFuelPercents() []VehicleStatsFuelPercent {
	if o == nil || IsNil(o.FuelPercents) {
		var ret []VehicleStatsFuelPercent
		return ret
	}
	return o.FuelPercents
}

// GetFuelPercentsOk returns a tuple with the FuelPercents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsListResponseDataInner) GetFuelPercentsOk() ([]VehicleStatsFuelPercent, bool) {
	if o == nil || IsNil(o.FuelPercents) {
		return nil, false
	}
	return o.FuelPercents, true
}

// HasFuelPercents returns a boolean if a field has been set.
func (o *VehicleStatsListResponseDataInner) HasFuelPercents() bool {
	if o != nil && !IsNil(o.FuelPercents) {
		return true
	}

	return false
}

// SetFuelPercents gets a reference to the given []VehicleStatsFuelPercent and assigns it to the FuelPercents field.
func (o *VehicleStatsListResponseDataInner) SetFuelPercents(v []VehicleStatsFuelPercent) {
	o.FuelPercents = v
}

// GetGpsDistanceMeters returns the GpsDistanceMeters field value if set, zero value otherwise.
func (o *VehicleStatsListResponseDataInner) GetGpsDistanceMeters() []VehicleStatsGpsDistanceMeters {
	if o == nil || IsNil(o.GpsDistanceMeters) {
		var ret []VehicleStatsGpsDistanceMeters
		return ret
	}
	return o.GpsDistanceMeters
}

// GetGpsDistanceMetersOk returns a tuple with the GpsDistanceMeters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsListResponseDataInner) GetGpsDistanceMetersOk() ([]VehicleStatsGpsDistanceMeters, bool) {
	if o == nil || IsNil(o.GpsDistanceMeters) {
		return nil, false
	}
	return o.GpsDistanceMeters, true
}

// HasGpsDistanceMeters returns a boolean if a field has been set.
func (o *VehicleStatsListResponseDataInner) HasGpsDistanceMeters() bool {
	if o != nil && !IsNil(o.GpsDistanceMeters) {
		return true
	}

	return false
}

// SetGpsDistanceMeters gets a reference to the given []VehicleStatsGpsDistanceMeters and assigns it to the GpsDistanceMeters field.
func (o *VehicleStatsListResponseDataInner) SetGpsDistanceMeters(v []VehicleStatsGpsDistanceMeters) {
	o.GpsDistanceMeters = v
}

// GetGpsOdometerMeters returns the GpsOdometerMeters field value if set, zero value otherwise.
func (o *VehicleStatsListResponseDataInner) GetGpsOdometerMeters() []VehicleStatsGpsOdometerMeters {
	if o == nil || IsNil(o.GpsOdometerMeters) {
		var ret []VehicleStatsGpsOdometerMeters
		return ret
	}
	return o.GpsOdometerMeters
}

// GetGpsOdometerMetersOk returns a tuple with the GpsOdometerMeters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsListResponseDataInner) GetGpsOdometerMetersOk() ([]VehicleStatsGpsOdometerMeters, bool) {
	if o == nil || IsNil(o.GpsOdometerMeters) {
		return nil, false
	}
	return o.GpsOdometerMeters, true
}

// HasGpsOdometerMeters returns a boolean if a field has been set.
func (o *VehicleStatsListResponseDataInner) HasGpsOdometerMeters() bool {
	if o != nil && !IsNil(o.GpsOdometerMeters) {
		return true
	}

	return false
}

// SetGpsOdometerMeters gets a reference to the given []VehicleStatsGpsOdometerMeters and assigns it to the GpsOdometerMeters field.
func (o *VehicleStatsListResponseDataInner) SetGpsOdometerMeters(v []VehicleStatsGpsOdometerMeters) {
	o.GpsOdometerMeters = v
}

// GetId returns the Id field value
func (o *VehicleStatsListResponseDataInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VehicleStatsListResponseDataInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VehicleStatsListResponseDataInner) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *VehicleStatsListResponseDataInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VehicleStatsListResponseDataInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VehicleStatsListResponseDataInner) SetName(v string) {
	o.Name = v
}

// GetObdEngineSeconds returns the ObdEngineSeconds field value if set, zero value otherwise.
func (o *VehicleStatsListResponseDataInner) GetObdEngineSeconds() []VehicleStatsObdEngineSeconds {
	if o == nil || IsNil(o.ObdEngineSeconds) {
		var ret []VehicleStatsObdEngineSeconds
		return ret
	}
	return o.ObdEngineSeconds
}

// GetObdEngineSecondsOk returns a tuple with the ObdEngineSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsListResponseDataInner) GetObdEngineSecondsOk() ([]VehicleStatsObdEngineSeconds, bool) {
	if o == nil || IsNil(o.ObdEngineSeconds) {
		return nil, false
	}
	return o.ObdEngineSeconds, true
}

// HasObdEngineSeconds returns a boolean if a field has been set.
func (o *VehicleStatsListResponseDataInner) HasObdEngineSeconds() bool {
	if o != nil && !IsNil(o.ObdEngineSeconds) {
		return true
	}

	return false
}

// SetObdEngineSeconds gets a reference to the given []VehicleStatsObdEngineSeconds and assigns it to the ObdEngineSeconds field.
func (o *VehicleStatsListResponseDataInner) SetObdEngineSeconds(v []VehicleStatsObdEngineSeconds) {
	o.ObdEngineSeconds = v
}

// GetObdOdometerMeters returns the ObdOdometerMeters field value if set, zero value otherwise.
func (o *VehicleStatsListResponseDataInner) GetObdOdometerMeters() []VehicleStatsObdOdometerMeters {
	if o == nil || IsNil(o.ObdOdometerMeters) {
		var ret []VehicleStatsObdOdometerMeters
		return ret
	}
	return o.ObdOdometerMeters
}

// GetObdOdometerMetersOk returns a tuple with the ObdOdometerMeters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsListResponseDataInner) GetObdOdometerMetersOk() ([]VehicleStatsObdOdometerMeters, bool) {
	if o == nil || IsNil(o.ObdOdometerMeters) {
		return nil, false
	}
	return o.ObdOdometerMeters, true
}

// HasObdOdometerMeters returns a boolean if a field has been set.
func (o *VehicleStatsListResponseDataInner) HasObdOdometerMeters() bool {
	if o != nil && !IsNil(o.ObdOdometerMeters) {
		return true
	}

	return false
}

// SetObdOdometerMeters gets a reference to the given []VehicleStatsObdOdometerMeters and assigns it to the ObdOdometerMeters field.
func (o *VehicleStatsListResponseDataInner) SetObdOdometerMeters(v []VehicleStatsObdOdometerMeters) {
	o.ObdOdometerMeters = v
}

func (o VehicleStatsListResponseDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VehicleStatsListResponseDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EngineStates) {
		toSerialize["engineStates"] = o.EngineStates
	}
	if !IsNil(o.FuelPercents) {
		toSerialize["fuelPercents"] = o.FuelPercents
	}
	if !IsNil(o.GpsDistanceMeters) {
		toSerialize["gpsDistanceMeters"] = o.GpsDistanceMeters
	}
	if !IsNil(o.GpsOdometerMeters) {
		toSerialize["gpsOdometerMeters"] = o.GpsOdometerMeters
	}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.ObdEngineSeconds) {
		toSerialize["obdEngineSeconds"] = o.ObdEngineSeconds
	}
	if !IsNil(o.ObdOdometerMeters) {
		toSerialize["obdOdometerMeters"] = o.ObdOdometerMeters
	}
	return toSerialize, nil
}

func (o *VehicleStatsListResponseDataInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVehicleStatsListResponseDataInner := _VehicleStatsListResponseDataInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVehicleStatsListResponseDataInner)

	if err != nil {
		return err
	}

	*o = VehicleStatsListResponseDataInner(varVehicleStatsListResponseDataInner)

	return err
}

type NullableVehicleStatsListResponseDataInner struct {
	value *VehicleStatsListResponseDataInner
	isSet bool
}

func (v NullableVehicleStatsListResponseDataInner) Get() *VehicleStatsListResponseDataInner {
	return v.value
}

func (v *NullableVehicleStatsListResponseDataInner) Set(val *VehicleStatsListResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicleStatsListResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicleStatsListResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicleStatsListResponseDataInner(val *VehicleStatsListResponseDataInner) *NullableVehicleStatsListResponseDataInner {
	return &NullableVehicleStatsListResponseDataInner{value: val, isSet: true}
}

func (v NullableVehicleStatsListResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicleStatsListResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


