/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package samsarago

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddressGeofenceCircle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressGeofenceCircle{}

// AddressGeofenceCircle Information about a circular geofence. This field is only needed if the geofence is a circle.
type AddressGeofenceCircle struct {
	// Latitude of the address. Will be geocoded from `formattedAddress` if not provided.
	Latitude *float64 `json:"latitude,omitempty"`
	// Longitude of the address. Will be geocoded from `formattedAddress` if not provided.
	Longitude *float64 `json:"longitude,omitempty"`
	// The radius of the circular geofence in meters.
	RadiusMeters int64 `json:"radiusMeters"`
}

type _AddressGeofenceCircle AddressGeofenceCircle

// NewAddressGeofenceCircle instantiates a new AddressGeofenceCircle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressGeofenceCircle(radiusMeters int64) *AddressGeofenceCircle {
	this := AddressGeofenceCircle{}
	this.RadiusMeters = radiusMeters
	return &this
}

// NewAddressGeofenceCircleWithDefaults instantiates a new AddressGeofenceCircle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressGeofenceCircleWithDefaults() *AddressGeofenceCircle {
	this := AddressGeofenceCircle{}
	return &this
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *AddressGeofenceCircle) GetLatitude() float64 {
	if o == nil || IsNil(o.Latitude) {
		var ret float64
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressGeofenceCircle) GetLatitudeOk() (*float64, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *AddressGeofenceCircle) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float64 and assigns it to the Latitude field.
func (o *AddressGeofenceCircle) SetLatitude(v float64) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *AddressGeofenceCircle) GetLongitude() float64 {
	if o == nil || IsNil(o.Longitude) {
		var ret float64
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressGeofenceCircle) GetLongitudeOk() (*float64, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *AddressGeofenceCircle) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float64 and assigns it to the Longitude field.
func (o *AddressGeofenceCircle) SetLongitude(v float64) {
	o.Longitude = &v
}

// GetRadiusMeters returns the RadiusMeters field value
func (o *AddressGeofenceCircle) GetRadiusMeters() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RadiusMeters
}

// GetRadiusMetersOk returns a tuple with the RadiusMeters field value
// and a boolean to check if the value has been set.
func (o *AddressGeofenceCircle) GetRadiusMetersOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RadiusMeters, true
}

// SetRadiusMeters sets field value
func (o *AddressGeofenceCircle) SetRadiusMeters(v int64) {
	o.RadiusMeters = v
}

func (o AddressGeofenceCircle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressGeofenceCircle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}
	toSerialize["radiusMeters"] = o.RadiusMeters
	return toSerialize, nil
}

func (o *AddressGeofenceCircle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"radiusMeters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressGeofenceCircle := _AddressGeofenceCircle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressGeofenceCircle)

	if err != nil {
		return err
	}

	*o = AddressGeofenceCircle(varAddressGeofenceCircle)

	return err
}

type NullableAddressGeofenceCircle struct {
	value *AddressGeofenceCircle
	isSet bool
}

func (v NullableAddressGeofenceCircle) Get() *AddressGeofenceCircle {
	return v.value
}

func (v *NullableAddressGeofenceCircle) Set(val *AddressGeofenceCircle) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressGeofenceCircle) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressGeofenceCircle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressGeofenceCircle(val *AddressGeofenceCircle) *NullableAddressGeofenceCircle {
	return &NullableAddressGeofenceCircle{value: val, isSet: true}
}

func (v NullableAddressGeofenceCircle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressGeofenceCircle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


