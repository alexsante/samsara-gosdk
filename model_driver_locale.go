/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package samsarago

import (
	"encoding/json"
	"fmt"
)

// DriverLocale Locale override (uncommon). These are specified by ISO 3166-2 country codes for supported locales.
type DriverLocale string

// List of DriverLocale
const (
	US DriverLocale = "us"
	AT DriverLocale = "at"
	BE DriverLocale = "be"
	CA DriverLocale = "ca"
	GB DriverLocale = "gb"
	FR DriverLocale = "fr"
	DE DriverLocale = "de"
	IE DriverLocale = "ie"
	IT DriverLocale = "it"
	LU DriverLocale = "lu"
	MX DriverLocale = "mx"
	NL DriverLocale = "nl"
	ES DriverLocale = "es"
	CH DriverLocale = "ch"
)

// All allowed values of DriverLocale enum
var AllowedDriverLocaleEnumValues = []DriverLocale{
	"us",
	"at",
	"be",
	"ca",
	"gb",
	"fr",
	"de",
	"ie",
	"it",
	"lu",
	"mx",
	"nl",
	"es",
	"ch",
}

func (v *DriverLocale) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DriverLocale(value)
	for _, existing := range AllowedDriverLocaleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DriverLocale", value)
}

// NewDriverLocaleFromValue returns a pointer to a valid DriverLocale
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDriverLocaleFromValue(v string) (*DriverLocale, error) {
	ev := DriverLocale(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DriverLocale: valid values are %v", v, AllowedDriverLocaleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DriverLocale) IsValid() bool {
	for _, existing := range AllowedDriverLocaleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DriverLocale value
func (v DriverLocale) Ptr() *DriverLocale {
	return &v
}

type NullableDriverLocale struct {
	value *DriverLocale
	isSet bool
}

func (v NullableDriverLocale) Get() *DriverLocale {
	return v.value
}

func (v *NullableDriverLocale) Set(val *DriverLocale) {
	v.value = val
	v.isSet = true
}

func (v NullableDriverLocale) IsSet() bool {
	return v.isSet
}

func (v *NullableDriverLocale) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDriverLocale(val *DriverLocale) *NullableDriverLocale {
	return &NullableDriverLocale{value: val, isSet: true}
}

func (v NullableDriverLocale) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDriverLocale) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

