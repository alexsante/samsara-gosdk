/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateVehicleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateVehicleRequest{}

// UpdateVehicleRequest All the editable portions of the vehicle object.
type UpdateVehicleRequest struct {
	AuxInputType1 *VehicleAuxInputType `json:"auxInputType1,omitempty"`
	AuxInputType2 *VehicleAuxInputType `json:"auxInputType2,omitempty"`
	// A manual override for the vehicle's engine hours. You may only override a vehicle's engine hours if it cannot be read from on-board diagnostics. When you provide a manual engine hours override, Samsara will begin updating a vehicle's engine hours based on when the Samsara Vehicle Gateway is recieving power or not.
	EngineHours *int64 `json:"engineHours,omitempty"`
	// The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
	ExternalIds *map[string]string `json:"externalIds,omitempty"`
	HarshAccelerationSettingType *VehicleHarshAccelerationSettingType `json:"harshAccelerationSettingType,omitempty"`
	// The license plate of the Vehicle. **By default**: empty. Can be set or updated through the Samsara Dashboard or the API at any time.
	LicensePlate *string `json:"licensePlate,omitempty"`
	// The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsaraâ€™s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
	Name *string `json:"name,omitempty"`
	// These are generic notes about the Vehicle. Empty by default. Can be set or updated through the Samsara Dashboard or the API at any time.
	Notes *string `json:"notes,omitempty"`
	// A manual override for the vehicle's odometer. You may only override a vehicle's odometer if it cannot be read from on-board diagnostics. When you provide a manual odometer override, Samsara will begin updating a vehicle's odometer using GPS distance traveled since this override was set. See [here](https://kb.samsara.com/hc/en-us/articles/115005273667) for more details.
	OdometerMeters *int64 `json:"odometerMeters,omitempty"`
	// ID for the static assigned driver of the vehicle.
	StaticAssignedDriverId *string `json:"staticAssignedDriverId,omitempty"`
	// An array of IDs of tags to associate with this vehicle.
	TagIds []string `json:"tagIds,omitempty"`
	// The VIN of the Vehicle. Most of the time, this will be automatically read from the engine computer by the Samsara Vehicle Gateway. It will be empty if it cannot be read. It can be set or updated through the Samsara Dashboard or the API at any time.
	Vin *string `json:"vin,omitempty"`
}

// NewUpdateVehicleRequest instantiates a new UpdateVehicleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVehicleRequest() *UpdateVehicleRequest {
	this := UpdateVehicleRequest{}
	var notes string = ""
	this.Notes = &notes
	return &this
}

// NewUpdateVehicleRequestWithDefaults instantiates a new UpdateVehicleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVehicleRequestWithDefaults() *UpdateVehicleRequest {
	this := UpdateVehicleRequest{}
	var notes string = ""
	this.Notes = &notes
	return &this
}

// GetAuxInputType1 returns the AuxInputType1 field value if set, zero value otherwise.
func (o *UpdateVehicleRequest) GetAuxInputType1() VehicleAuxInputType {
	if o == nil || IsNil(o.AuxInputType1) {
		var ret VehicleAuxInputType
		return ret
	}
	return *o.AuxInputType1
}

// GetAuxInputType1Ok returns a tuple with the AuxInputType1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVehicleRequest) GetAuxInputType1Ok() (*VehicleAuxInputType, bool) {
	if o == nil || IsNil(o.AuxInputType1) {
		return nil, false
	}
	return o.AuxInputType1, true
}

// HasAuxInputType1 returns a boolean if a field has been set.
func (o *UpdateVehicleRequest) HasAuxInputType1() bool {
	if o != nil && !IsNil(o.AuxInputType1) {
		return true
	}

	return false
}

// SetAuxInputType1 gets a reference to the given VehicleAuxInputType and assigns it to the AuxInputType1 field.
func (o *UpdateVehicleRequest) SetAuxInputType1(v VehicleAuxInputType) {
	o.AuxInputType1 = &v
}

// GetAuxInputType2 returns the AuxInputType2 field value if set, zero value otherwise.
func (o *UpdateVehicleRequest) GetAuxInputType2() VehicleAuxInputType {
	if o == nil || IsNil(o.AuxInputType2) {
		var ret VehicleAuxInputType
		return ret
	}
	return *o.AuxInputType2
}

// GetAuxInputType2Ok returns a tuple with the AuxInputType2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVehicleRequest) GetAuxInputType2Ok() (*VehicleAuxInputType, bool) {
	if o == nil || IsNil(o.AuxInputType2) {
		return nil, false
	}
	return o.AuxInputType2, true
}

// HasAuxInputType2 returns a boolean if a field has been set.
func (o *UpdateVehicleRequest) HasAuxInputType2() bool {
	if o != nil && !IsNil(o.AuxInputType2) {
		return true
	}

	return false
}

// SetAuxInputType2 gets a reference to the given VehicleAuxInputType and assigns it to the AuxInputType2 field.
func (o *UpdateVehicleRequest) SetAuxInputType2(v VehicleAuxInputType) {
	o.AuxInputType2 = &v
}

// GetEngineHours returns the EngineHours field value if set, zero value otherwise.
func (o *UpdateVehicleRequest) GetEngineHours() int64 {
	if o == nil || IsNil(o.EngineHours) {
		var ret int64
		return ret
	}
	return *o.EngineHours
}

// GetEngineHoursOk returns a tuple with the EngineHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVehicleRequest) GetEngineHoursOk() (*int64, bool) {
	if o == nil || IsNil(o.EngineHours) {
		return nil, false
	}
	return o.EngineHours, true
}

// HasEngineHours returns a boolean if a field has been set.
func (o *UpdateVehicleRequest) HasEngineHours() bool {
	if o != nil && !IsNil(o.EngineHours) {
		return true
	}

	return false
}

// SetEngineHours gets a reference to the given int64 and assigns it to the EngineHours field.
func (o *UpdateVehicleRequest) SetEngineHours(v int64) {
	o.EngineHours = &v
}

// GetExternalIds returns the ExternalIds field value if set, zero value otherwise.
func (o *UpdateVehicleRequest) GetExternalIds() map[string]string {
	if o == nil || IsNil(o.ExternalIds) {
		var ret map[string]string
		return ret
	}
	return *o.ExternalIds
}

// GetExternalIdsOk returns a tuple with the ExternalIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVehicleRequest) GetExternalIdsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ExternalIds) {
		return nil, false
	}
	return o.ExternalIds, true
}

// HasExternalIds returns a boolean if a field has been set.
func (o *UpdateVehicleRequest) HasExternalIds() bool {
	if o != nil && !IsNil(o.ExternalIds) {
		return true
	}

	return false
}

// SetExternalIds gets a reference to the given map[string]string and assigns it to the ExternalIds field.
func (o *UpdateVehicleRequest) SetExternalIds(v map[string]string) {
	o.ExternalIds = &v
}

// GetHarshAccelerationSettingType returns the HarshAccelerationSettingType field value if set, zero value otherwise.
func (o *UpdateVehicleRequest) GetHarshAccelerationSettingType() VehicleHarshAccelerationSettingType {
	if o == nil || IsNil(o.HarshAccelerationSettingType) {
		var ret VehicleHarshAccelerationSettingType
		return ret
	}
	return *o.HarshAccelerationSettingType
}

// GetHarshAccelerationSettingTypeOk returns a tuple with the HarshAccelerationSettingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVehicleRequest) GetHarshAccelerationSettingTypeOk() (*VehicleHarshAccelerationSettingType, bool) {
	if o == nil || IsNil(o.HarshAccelerationSettingType) {
		return nil, false
	}
	return o.HarshAccelerationSettingType, true
}

// HasHarshAccelerationSettingType returns a boolean if a field has been set.
func (o *UpdateVehicleRequest) HasHarshAccelerationSettingType() bool {
	if o != nil && !IsNil(o.HarshAccelerationSettingType) {
		return true
	}

	return false
}

// SetHarshAccelerationSettingType gets a reference to the given VehicleHarshAccelerationSettingType and assigns it to the HarshAccelerationSettingType field.
func (o *UpdateVehicleRequest) SetHarshAccelerationSettingType(v VehicleHarshAccelerationSettingType) {
	o.HarshAccelerationSettingType = &v
}

// GetLicensePlate returns the LicensePlate field value if set, zero value otherwise.
func (o *UpdateVehicleRequest) GetLicensePlate() string {
	if o == nil || IsNil(o.LicensePlate) {
		var ret string
		return ret
	}
	return *o.LicensePlate
}

// GetLicensePlateOk returns a tuple with the LicensePlate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVehicleRequest) GetLicensePlateOk() (*string, bool) {
	if o == nil || IsNil(o.LicensePlate) {
		return nil, false
	}
	return o.LicensePlate, true
}

// HasLicensePlate returns a boolean if a field has been set.
func (o *UpdateVehicleRequest) HasLicensePlate() bool {
	if o != nil && !IsNil(o.LicensePlate) {
		return true
	}

	return false
}

// SetLicensePlate gets a reference to the given string and assigns it to the LicensePlate field.
func (o *UpdateVehicleRequest) SetLicensePlate(v string) {
	o.LicensePlate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateVehicleRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVehicleRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateVehicleRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateVehicleRequest) SetName(v string) {
	o.Name = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *UpdateVehicleRequest) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVehicleRequest) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *UpdateVehicleRequest) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *UpdateVehicleRequest) SetNotes(v string) {
	o.Notes = &v
}

// GetOdometerMeters returns the OdometerMeters field value if set, zero value otherwise.
func (o *UpdateVehicleRequest) GetOdometerMeters() int64 {
	if o == nil || IsNil(o.OdometerMeters) {
		var ret int64
		return ret
	}
	return *o.OdometerMeters
}

// GetOdometerMetersOk returns a tuple with the OdometerMeters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVehicleRequest) GetOdometerMetersOk() (*int64, bool) {
	if o == nil || IsNil(o.OdometerMeters) {
		return nil, false
	}
	return o.OdometerMeters, true
}

// HasOdometerMeters returns a boolean if a field has been set.
func (o *UpdateVehicleRequest) HasOdometerMeters() bool {
	if o != nil && !IsNil(o.OdometerMeters) {
		return true
	}

	return false
}

// SetOdometerMeters gets a reference to the given int64 and assigns it to the OdometerMeters field.
func (o *UpdateVehicleRequest) SetOdometerMeters(v int64) {
	o.OdometerMeters = &v
}

// GetStaticAssignedDriverId returns the StaticAssignedDriverId field value if set, zero value otherwise.
func (o *UpdateVehicleRequest) GetStaticAssignedDriverId() string {
	if o == nil || IsNil(o.StaticAssignedDriverId) {
		var ret string
		return ret
	}
	return *o.StaticAssignedDriverId
}

// GetStaticAssignedDriverIdOk returns a tuple with the StaticAssignedDriverId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVehicleRequest) GetStaticAssignedDriverIdOk() (*string, bool) {
	if o == nil || IsNil(o.StaticAssignedDriverId) {
		return nil, false
	}
	return o.StaticAssignedDriverId, true
}

// HasStaticAssignedDriverId returns a boolean if a field has been set.
func (o *UpdateVehicleRequest) HasStaticAssignedDriverId() bool {
	if o != nil && !IsNil(o.StaticAssignedDriverId) {
		return true
	}

	return false
}

// SetStaticAssignedDriverId gets a reference to the given string and assigns it to the StaticAssignedDriverId field.
func (o *UpdateVehicleRequest) SetStaticAssignedDriverId(v string) {
	o.StaticAssignedDriverId = &v
}

// GetTagIds returns the TagIds field value if set, zero value otherwise.
func (o *UpdateVehicleRequest) GetTagIds() []string {
	if o == nil || IsNil(o.TagIds) {
		var ret []string
		return ret
	}
	return o.TagIds
}

// GetTagIdsOk returns a tuple with the TagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVehicleRequest) GetTagIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TagIds) {
		return nil, false
	}
	return o.TagIds, true
}

// HasTagIds returns a boolean if a field has been set.
func (o *UpdateVehicleRequest) HasTagIds() bool {
	if o != nil && !IsNil(o.TagIds) {
		return true
	}

	return false
}

// SetTagIds gets a reference to the given []string and assigns it to the TagIds field.
func (o *UpdateVehicleRequest) SetTagIds(v []string) {
	o.TagIds = v
}

// GetVin returns the Vin field value if set, zero value otherwise.
func (o *UpdateVehicleRequest) GetVin() string {
	if o == nil || IsNil(o.Vin) {
		var ret string
		return ret
	}
	return *o.Vin
}

// GetVinOk returns a tuple with the Vin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVehicleRequest) GetVinOk() (*string, bool) {
	if o == nil || IsNil(o.Vin) {
		return nil, false
	}
	return o.Vin, true
}

// HasVin returns a boolean if a field has been set.
func (o *UpdateVehicleRequest) HasVin() bool {
	if o != nil && !IsNil(o.Vin) {
		return true
	}

	return false
}

// SetVin gets a reference to the given string and assigns it to the Vin field.
func (o *UpdateVehicleRequest) SetVin(v string) {
	o.Vin = &v
}

func (o UpdateVehicleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateVehicleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuxInputType1) {
		toSerialize["auxInputType1"] = o.AuxInputType1
	}
	if !IsNil(o.AuxInputType2) {
		toSerialize["auxInputType2"] = o.AuxInputType2
	}
	if !IsNil(o.EngineHours) {
		toSerialize["engineHours"] = o.EngineHours
	}
	if !IsNil(o.ExternalIds) {
		toSerialize["externalIds"] = o.ExternalIds
	}
	if !IsNil(o.HarshAccelerationSettingType) {
		toSerialize["harshAccelerationSettingType"] = o.HarshAccelerationSettingType
	}
	if !IsNil(o.LicensePlate) {
		toSerialize["licensePlate"] = o.LicensePlate
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.OdometerMeters) {
		toSerialize["odometerMeters"] = o.OdometerMeters
	}
	if !IsNil(o.StaticAssignedDriverId) {
		toSerialize["staticAssignedDriverId"] = o.StaticAssignedDriverId
	}
	if !IsNil(o.TagIds) {
		toSerialize["tagIds"] = o.TagIds
	}
	if !IsNil(o.Vin) {
		toSerialize["vin"] = o.Vin
	}
	return toSerialize, nil
}

type NullableUpdateVehicleRequest struct {
	value *UpdateVehicleRequest
	isSet bool
}

func (v NullableUpdateVehicleRequest) Get() *UpdateVehicleRequest {
	return v.value
}

func (v *NullableUpdateVehicleRequest) Set(val *UpdateVehicleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVehicleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVehicleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVehicleRequest(val *UpdateVehicleRequest) *NullableUpdateVehicleRequest {
	return &NullableUpdateVehicleRequest{value: val, isSet: true}
}

func (v NullableUpdateVehicleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVehicleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


