/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListUserRolesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListUserRolesResponse{}

// ListUserRolesResponse A list of user roles.
type ListUserRolesResponse struct {
	// A list of user roles
	Data []UserRole `json:"data,omitempty"`
	Pagination *PaginationResponse `json:"pagination,omitempty"`
}

// NewListUserRolesResponse instantiates a new ListUserRolesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListUserRolesResponse() *ListUserRolesResponse {
	this := ListUserRolesResponse{}
	return &this
}

// NewListUserRolesResponseWithDefaults instantiates a new ListUserRolesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListUserRolesResponseWithDefaults() *ListUserRolesResponse {
	this := ListUserRolesResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ListUserRolesResponse) GetData() []UserRole {
	if o == nil || IsNil(o.Data) {
		var ret []UserRole
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListUserRolesResponse) GetDataOk() ([]UserRole, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ListUserRolesResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []UserRole and assigns it to the Data field.
func (o *ListUserRolesResponse) SetData(v []UserRole) {
	o.Data = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ListUserRolesResponse) GetPagination() PaginationResponse {
	if o == nil || IsNil(o.Pagination) {
		var ret PaginationResponse
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListUserRolesResponse) GetPaginationOk() (*PaginationResponse, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ListUserRolesResponse) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given PaginationResponse and assigns it to the Pagination field.
func (o *ListUserRolesResponse) SetPagination(v PaginationResponse) {
	o.Pagination = &v
}

func (o ListUserRolesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListUserRolesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	return toSerialize, nil
}

type NullableListUserRolesResponse struct {
	value *ListUserRolesResponse
	isSet bool
}

func (v NullableListUserRolesResponse) Get() *ListUserRolesResponse {
	return v.value
}

func (v *NullableListUserRolesResponse) Set(val *ListUserRolesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListUserRolesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListUserRolesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListUserRolesResponse(val *ListUserRolesResponse) *NullableListUserRolesResponse {
	return &NullableListUserRolesResponse{value: val, isSet: true}
}

func (v NullableListUserRolesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListUserRolesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


