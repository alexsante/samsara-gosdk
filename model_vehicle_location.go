/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the VehicleLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VehicleLocation{}

// VehicleLocation Vehicle location event.
type VehicleLocation struct {
	// Heading of the vehicle in degrees.
	Heading *float64 `json:"heading,omitempty"`
	// GPS latitude represented in degrees
	Latitude float64 `json:"latitude"`
	// GPS longitude represented in degrees
	Longitude float64 `json:"longitude"`
	ReverseGeo *VehicleLocationReverseGeo `json:"reverseGeo,omitempty"`
	// GPS speed of the vehicle in miles per hour.
	Speed *float64 `json:"speed,omitempty"`
	// UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
	Time time.Time `json:"time"`
}

type _VehicleLocation VehicleLocation

// NewVehicleLocation instantiates a new VehicleLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicleLocation(latitude float64, longitude float64, time time.Time) *VehicleLocation {
	this := VehicleLocation{}
	this.Latitude = latitude
	this.Longitude = longitude
	this.Time = time
	return &this
}

// NewVehicleLocationWithDefaults instantiates a new VehicleLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleLocationWithDefaults() *VehicleLocation {
	this := VehicleLocation{}
	return &this
}

// GetHeading returns the Heading field value if set, zero value otherwise.
func (o *VehicleLocation) GetHeading() float64 {
	if o == nil || IsNil(o.Heading) {
		var ret float64
		return ret
	}
	return *o.Heading
}

// GetHeadingOk returns a tuple with the Heading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleLocation) GetHeadingOk() (*float64, bool) {
	if o == nil || IsNil(o.Heading) {
		return nil, false
	}
	return o.Heading, true
}

// HasHeading returns a boolean if a field has been set.
func (o *VehicleLocation) HasHeading() bool {
	if o != nil && !IsNil(o.Heading) {
		return true
	}

	return false
}

// SetHeading gets a reference to the given float64 and assigns it to the Heading field.
func (o *VehicleLocation) SetHeading(v float64) {
	o.Heading = &v
}

// GetLatitude returns the Latitude field value
func (o *VehicleLocation) GetLatitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *VehicleLocation) GetLatitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *VehicleLocation) SetLatitude(v float64) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *VehicleLocation) GetLongitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *VehicleLocation) GetLongitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *VehicleLocation) SetLongitude(v float64) {
	o.Longitude = v
}

// GetReverseGeo returns the ReverseGeo field value if set, zero value otherwise.
func (o *VehicleLocation) GetReverseGeo() VehicleLocationReverseGeo {
	if o == nil || IsNil(o.ReverseGeo) {
		var ret VehicleLocationReverseGeo
		return ret
	}
	return *o.ReverseGeo
}

// GetReverseGeoOk returns a tuple with the ReverseGeo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleLocation) GetReverseGeoOk() (*VehicleLocationReverseGeo, bool) {
	if o == nil || IsNil(o.ReverseGeo) {
		return nil, false
	}
	return o.ReverseGeo, true
}

// HasReverseGeo returns a boolean if a field has been set.
func (o *VehicleLocation) HasReverseGeo() bool {
	if o != nil && !IsNil(o.ReverseGeo) {
		return true
	}

	return false
}

// SetReverseGeo gets a reference to the given VehicleLocationReverseGeo and assigns it to the ReverseGeo field.
func (o *VehicleLocation) SetReverseGeo(v VehicleLocationReverseGeo) {
	o.ReverseGeo = &v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *VehicleLocation) GetSpeed() float64 {
	if o == nil || IsNil(o.Speed) {
		var ret float64
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleLocation) GetSpeedOk() (*float64, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *VehicleLocation) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given float64 and assigns it to the Speed field.
func (o *VehicleLocation) SetSpeed(v float64) {
	o.Speed = &v
}

// GetTime returns the Time field value
func (o *VehicleLocation) GetTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *VehicleLocation) GetTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *VehicleLocation) SetTime(v time.Time) {
	o.Time = v
}

func (o VehicleLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VehicleLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Heading) {
		toSerialize["heading"] = o.Heading
	}
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude
	if !IsNil(o.ReverseGeo) {
		toSerialize["reverseGeo"] = o.ReverseGeo
	}
	if !IsNil(o.Speed) {
		toSerialize["speed"] = o.Speed
	}
	toSerialize["time"] = o.Time
	return toSerialize, nil
}

func (o *VehicleLocation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"latitude",
		"longitude",
		"time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVehicleLocation := _VehicleLocation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVehicleLocation)

	if err != nil {
		return err
	}

	*o = VehicleLocation(varVehicleLocation)

	return err
}

type NullableVehicleLocation struct {
	value *VehicleLocation
	isSet bool
}

func (v NullableVehicleLocation) Get() *VehicleLocation {
	return v.value
}

func (v *NullableVehicleLocation) Set(val *VehicleLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicleLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicleLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicleLocation(val *VehicleLocation) *NullableVehicleLocation {
	return &NullableVehicleLocation{value: val, isSet: true}
}

func (v NullableVehicleLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicleLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


