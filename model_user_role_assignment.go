/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserRoleAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserRoleAssignment{}

// UserRoleAssignment A role that applies to a user. If the role has a `tag`, then the role applies for that tag. If there is no `tag`, then the role applies at the organizational level. A user may have many tag-specific roles, but may only have one organizational level role. If the organizational level role has higher privileges than a tag-specific role, then the organizational role privileges will take precedence.
type UserRoleAssignment struct {
	Role *UserRole `json:"role,omitempty"`
	Tag *UserRoleAssignmentTag `json:"tag,omitempty"`
}

// NewUserRoleAssignment instantiates a new UserRoleAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserRoleAssignment() *UserRoleAssignment {
	this := UserRoleAssignment{}
	return &this
}

// NewUserRoleAssignmentWithDefaults instantiates a new UserRoleAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserRoleAssignmentWithDefaults() *UserRoleAssignment {
	this := UserRoleAssignment{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *UserRoleAssignment) GetRole() UserRole {
	if o == nil || IsNil(o.Role) {
		var ret UserRole
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleAssignment) GetRoleOk() (*UserRole, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *UserRoleAssignment) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given UserRole and assigns it to the Role field.
func (o *UserRoleAssignment) SetRole(v UserRole) {
	o.Role = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *UserRoleAssignment) GetTag() UserRoleAssignmentTag {
	if o == nil || IsNil(o.Tag) {
		var ret UserRoleAssignmentTag
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleAssignment) GetTagOk() (*UserRoleAssignmentTag, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *UserRoleAssignment) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given UserRoleAssignmentTag and assigns it to the Tag field.
func (o *UserRoleAssignment) SetTag(v UserRoleAssignmentTag) {
	o.Tag = &v
}

func (o UserRoleAssignment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserRoleAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	return toSerialize, nil
}

type NullableUserRoleAssignment struct {
	value *UserRoleAssignment
	isSet bool
}

func (v NullableUserRoleAssignment) Get() *UserRoleAssignment {
	return v.value
}

func (v *NullableUserRoleAssignment) Set(val *UserRoleAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRoleAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRoleAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRoleAssignment(val *UserRoleAssignment) *NullableUserRoleAssignment {
	return &NullableUserRoleAssignment{value: val, isSet: true}
}

func (v NullableUserRoleAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRoleAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


