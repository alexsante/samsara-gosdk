/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package samsarago

import (
	"encoding/json"
	"time"
)

// checks if the Driver type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Driver{}

// Driver A driver object
type Driver struct {
	CarrierSettings *DriverCarrierSettings `json:"carrierSettings,omitempty"`
	// The date and time this driver was created in RFC 3339 format.
	CreatedAtTime *time.Time `json:"createdAtTime,omitempty"`
	// Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
	EldAdverseWeatherExemptionEnabled *bool `json:"eldAdverseWeatherExemptionEnabled,omitempty"`
	// Flag indicating this driver may use Big Day exemption in ELD logs.
	EldBigDayExemptionEnabled *bool `json:"eldBigDayExemptionEnabled,omitempty"`
	// `0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.
	EldDayStartHour *int32 `json:"eldDayStartHour,omitempty"`
	// Flag indicating this driver is exempt from the Electronic Logging Mandate.
	EldExempt *bool `json:"eldExempt,omitempty"`
	// Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
	EldExemptReason *string `json:"eldExemptReason,omitempty"`
	// Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
	EldPcEnabled *bool `json:"eldPcEnabled,omitempty"`
	// Flag indicating this driver may select the Yard Move duty status in ELD logs.
	EldYmEnabled *bool `json:"eldYmEnabled,omitempty"`
	// The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
	ExternalIds *map[string]string `json:"externalIds,omitempty"`
	// Samsara ID for the driver.
	Id *string `json:"id,omitempty"`
	// A boolean indicating whether or not the driver is deactivated.
	IsDeactivated *bool `json:"isDeactivated,omitempty"`
	// Driver's state issued license number. The combination of this number and `licenseState` must be unique.
	LicenseNumber *string `json:"licenseNumber,omitempty"`
	// Abbreviation of state that issued driver's license.
	LicenseState *string `json:"licenseState,omitempty"`
	Locale *DriverLocale `json:"locale,omitempty"`
	// Driver's name.
	Name *string `json:"name,omitempty"`
	// Notes about the driver.
	Notes *string `json:"notes,omitempty"`
	// Phone number of the driver.
	Phone *string `json:"phone,omitempty"`
	StaticAssignedVehicle *DriverStaticAssignedVehicle `json:"staticAssignedVehicle,omitempty"`
	// Driver's assigned tachograph card number (Europe specific)
	TachographCardNumber *string `json:"tachographCardNumber,omitempty"`
	// The tags this driver belongs to.
	Tags []TagTinyResponse `json:"tags,omitempty"`
	// Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs. Driver timezones use [IANA timezone database](https://www.iana.org/time-zones) keys (e.g. `America/Los_Angeles`, `America/New_York`, `Europe/London`, etc.). You can find a mapping of common timezone formats to IANA timezone keys [here](https://unicode.org/cldr/charts/latest/supplemental/zone_tzid.html).
	Timezone *string `json:"timezone,omitempty"`
	// The date and time this driver was last updated in RFC 3339 format.
	UpdatedAtTime *time.Time `json:"updatedAtTime,omitempty"`
	// Driver's login username into the driver app. The username may not contain spaces or the '@' symbol. The username must be unique.
	Username *string `json:"username,omitempty"`
	VehicleGroupTag *DriverVehicleGroupTag `json:"vehicleGroupTag,omitempty"`
}

// NewDriver instantiates a new Driver object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDriver() *Driver {
	this := Driver{}
	var eldAdverseWeatherExemptionEnabled bool = false
	this.EldAdverseWeatherExemptionEnabled = &eldAdverseWeatherExemptionEnabled
	var eldBigDayExemptionEnabled bool = false
	this.EldBigDayExemptionEnabled = &eldBigDayExemptionEnabled
	var eldDayStartHour int32 = 0
	this.EldDayStartHour = &eldDayStartHour
	var eldExempt bool = false
	this.EldExempt = &eldExempt
	var eldPcEnabled bool = false
	this.EldPcEnabled = &eldPcEnabled
	var eldYmEnabled bool = false
	this.EldYmEnabled = &eldYmEnabled
	var timezone string = "America/Los_Angeles"
	this.Timezone = &timezone
	return &this
}

// NewDriverWithDefaults instantiates a new Driver object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDriverWithDefaults() *Driver {
	this := Driver{}
	var eldAdverseWeatherExemptionEnabled bool = false
	this.EldAdverseWeatherExemptionEnabled = &eldAdverseWeatherExemptionEnabled
	var eldBigDayExemptionEnabled bool = false
	this.EldBigDayExemptionEnabled = &eldBigDayExemptionEnabled
	var eldDayStartHour int32 = 0
	this.EldDayStartHour = &eldDayStartHour
	var eldExempt bool = false
	this.EldExempt = &eldExempt
	var eldPcEnabled bool = false
	this.EldPcEnabled = &eldPcEnabled
	var eldYmEnabled bool = false
	this.EldYmEnabled = &eldYmEnabled
	var timezone string = "America/Los_Angeles"
	this.Timezone = &timezone
	return &this
}

// GetCarrierSettings returns the CarrierSettings field value if set, zero value otherwise.
func (o *Driver) GetCarrierSettings() DriverCarrierSettings {
	if o == nil || IsNil(o.CarrierSettings) {
		var ret DriverCarrierSettings
		return ret
	}
	return *o.CarrierSettings
}

// GetCarrierSettingsOk returns a tuple with the CarrierSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetCarrierSettingsOk() (*DriverCarrierSettings, bool) {
	if o == nil || IsNil(o.CarrierSettings) {
		return nil, false
	}
	return o.CarrierSettings, true
}

// HasCarrierSettings returns a boolean if a field has been set.
func (o *Driver) HasCarrierSettings() bool {
	if o != nil && !IsNil(o.CarrierSettings) {
		return true
	}

	return false
}

// SetCarrierSettings gets a reference to the given DriverCarrierSettings and assigns it to the CarrierSettings field.
func (o *Driver) SetCarrierSettings(v DriverCarrierSettings) {
	o.CarrierSettings = &v
}

// GetCreatedAtTime returns the CreatedAtTime field value if set, zero value otherwise.
func (o *Driver) GetCreatedAtTime() time.Time {
	if o == nil || IsNil(o.CreatedAtTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAtTime
}

// GetCreatedAtTimeOk returns a tuple with the CreatedAtTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetCreatedAtTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAtTime) {
		return nil, false
	}
	return o.CreatedAtTime, true
}

// HasCreatedAtTime returns a boolean if a field has been set.
func (o *Driver) HasCreatedAtTime() bool {
	if o != nil && !IsNil(o.CreatedAtTime) {
		return true
	}

	return false
}

// SetCreatedAtTime gets a reference to the given time.Time and assigns it to the CreatedAtTime field.
func (o *Driver) SetCreatedAtTime(v time.Time) {
	o.CreatedAtTime = &v
}

// GetEldAdverseWeatherExemptionEnabled returns the EldAdverseWeatherExemptionEnabled field value if set, zero value otherwise.
func (o *Driver) GetEldAdverseWeatherExemptionEnabled() bool {
	if o == nil || IsNil(o.EldAdverseWeatherExemptionEnabled) {
		var ret bool
		return ret
	}
	return *o.EldAdverseWeatherExemptionEnabled
}

// GetEldAdverseWeatherExemptionEnabledOk returns a tuple with the EldAdverseWeatherExemptionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetEldAdverseWeatherExemptionEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EldAdverseWeatherExemptionEnabled) {
		return nil, false
	}
	return o.EldAdverseWeatherExemptionEnabled, true
}

// HasEldAdverseWeatherExemptionEnabled returns a boolean if a field has been set.
func (o *Driver) HasEldAdverseWeatherExemptionEnabled() bool {
	if o != nil && !IsNil(o.EldAdverseWeatherExemptionEnabled) {
		return true
	}

	return false
}

// SetEldAdverseWeatherExemptionEnabled gets a reference to the given bool and assigns it to the EldAdverseWeatherExemptionEnabled field.
func (o *Driver) SetEldAdverseWeatherExemptionEnabled(v bool) {
	o.EldAdverseWeatherExemptionEnabled = &v
}

// GetEldBigDayExemptionEnabled returns the EldBigDayExemptionEnabled field value if set, zero value otherwise.
func (o *Driver) GetEldBigDayExemptionEnabled() bool {
	if o == nil || IsNil(o.EldBigDayExemptionEnabled) {
		var ret bool
		return ret
	}
	return *o.EldBigDayExemptionEnabled
}

// GetEldBigDayExemptionEnabledOk returns a tuple with the EldBigDayExemptionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetEldBigDayExemptionEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EldBigDayExemptionEnabled) {
		return nil, false
	}
	return o.EldBigDayExemptionEnabled, true
}

// HasEldBigDayExemptionEnabled returns a boolean if a field has been set.
func (o *Driver) HasEldBigDayExemptionEnabled() bool {
	if o != nil && !IsNil(o.EldBigDayExemptionEnabled) {
		return true
	}

	return false
}

// SetEldBigDayExemptionEnabled gets a reference to the given bool and assigns it to the EldBigDayExemptionEnabled field.
func (o *Driver) SetEldBigDayExemptionEnabled(v bool) {
	o.EldBigDayExemptionEnabled = &v
}

// GetEldDayStartHour returns the EldDayStartHour field value if set, zero value otherwise.
func (o *Driver) GetEldDayStartHour() int32 {
	if o == nil || IsNil(o.EldDayStartHour) {
		var ret int32
		return ret
	}
	return *o.EldDayStartHour
}

// GetEldDayStartHourOk returns a tuple with the EldDayStartHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetEldDayStartHourOk() (*int32, bool) {
	if o == nil || IsNil(o.EldDayStartHour) {
		return nil, false
	}
	return o.EldDayStartHour, true
}

// HasEldDayStartHour returns a boolean if a field has been set.
func (o *Driver) HasEldDayStartHour() bool {
	if o != nil && !IsNil(o.EldDayStartHour) {
		return true
	}

	return false
}

// SetEldDayStartHour gets a reference to the given int32 and assigns it to the EldDayStartHour field.
func (o *Driver) SetEldDayStartHour(v int32) {
	o.EldDayStartHour = &v
}

// GetEldExempt returns the EldExempt field value if set, zero value otherwise.
func (o *Driver) GetEldExempt() bool {
	if o == nil || IsNil(o.EldExempt) {
		var ret bool
		return ret
	}
	return *o.EldExempt
}

// GetEldExemptOk returns a tuple with the EldExempt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetEldExemptOk() (*bool, bool) {
	if o == nil || IsNil(o.EldExempt) {
		return nil, false
	}
	return o.EldExempt, true
}

// HasEldExempt returns a boolean if a field has been set.
func (o *Driver) HasEldExempt() bool {
	if o != nil && !IsNil(o.EldExempt) {
		return true
	}

	return false
}

// SetEldExempt gets a reference to the given bool and assigns it to the EldExempt field.
func (o *Driver) SetEldExempt(v bool) {
	o.EldExempt = &v
}

// GetEldExemptReason returns the EldExemptReason field value if set, zero value otherwise.
func (o *Driver) GetEldExemptReason() string {
	if o == nil || IsNil(o.EldExemptReason) {
		var ret string
		return ret
	}
	return *o.EldExemptReason
}

// GetEldExemptReasonOk returns a tuple with the EldExemptReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetEldExemptReasonOk() (*string, bool) {
	if o == nil || IsNil(o.EldExemptReason) {
		return nil, false
	}
	return o.EldExemptReason, true
}

// HasEldExemptReason returns a boolean if a field has been set.
func (o *Driver) HasEldExemptReason() bool {
	if o != nil && !IsNil(o.EldExemptReason) {
		return true
	}

	return false
}

// SetEldExemptReason gets a reference to the given string and assigns it to the EldExemptReason field.
func (o *Driver) SetEldExemptReason(v string) {
	o.EldExemptReason = &v
}

// GetEldPcEnabled returns the EldPcEnabled field value if set, zero value otherwise.
func (o *Driver) GetEldPcEnabled() bool {
	if o == nil || IsNil(o.EldPcEnabled) {
		var ret bool
		return ret
	}
	return *o.EldPcEnabled
}

// GetEldPcEnabledOk returns a tuple with the EldPcEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetEldPcEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EldPcEnabled) {
		return nil, false
	}
	return o.EldPcEnabled, true
}

// HasEldPcEnabled returns a boolean if a field has been set.
func (o *Driver) HasEldPcEnabled() bool {
	if o != nil && !IsNil(o.EldPcEnabled) {
		return true
	}

	return false
}

// SetEldPcEnabled gets a reference to the given bool and assigns it to the EldPcEnabled field.
func (o *Driver) SetEldPcEnabled(v bool) {
	o.EldPcEnabled = &v
}

// GetEldYmEnabled returns the EldYmEnabled field value if set, zero value otherwise.
func (o *Driver) GetEldYmEnabled() bool {
	if o == nil || IsNil(o.EldYmEnabled) {
		var ret bool
		return ret
	}
	return *o.EldYmEnabled
}

// GetEldYmEnabledOk returns a tuple with the EldYmEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetEldYmEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EldYmEnabled) {
		return nil, false
	}
	return o.EldYmEnabled, true
}

// HasEldYmEnabled returns a boolean if a field has been set.
func (o *Driver) HasEldYmEnabled() bool {
	if o != nil && !IsNil(o.EldYmEnabled) {
		return true
	}

	return false
}

// SetEldYmEnabled gets a reference to the given bool and assigns it to the EldYmEnabled field.
func (o *Driver) SetEldYmEnabled(v bool) {
	o.EldYmEnabled = &v
}

// GetExternalIds returns the ExternalIds field value if set, zero value otherwise.
func (o *Driver) GetExternalIds() map[string]string {
	if o == nil || IsNil(o.ExternalIds) {
		var ret map[string]string
		return ret
	}
	return *o.ExternalIds
}

// GetExternalIdsOk returns a tuple with the ExternalIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetExternalIdsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ExternalIds) {
		return nil, false
	}
	return o.ExternalIds, true
}

// HasExternalIds returns a boolean if a field has been set.
func (o *Driver) HasExternalIds() bool {
	if o != nil && !IsNil(o.ExternalIds) {
		return true
	}

	return false
}

// SetExternalIds gets a reference to the given map[string]string and assigns it to the ExternalIds field.
func (o *Driver) SetExternalIds(v map[string]string) {
	o.ExternalIds = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Driver) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Driver) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Driver) SetId(v string) {
	o.Id = &v
}

// GetIsDeactivated returns the IsDeactivated field value if set, zero value otherwise.
func (o *Driver) GetIsDeactivated() bool {
	if o == nil || IsNil(o.IsDeactivated) {
		var ret bool
		return ret
	}
	return *o.IsDeactivated
}

// GetIsDeactivatedOk returns a tuple with the IsDeactivated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetIsDeactivatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeactivated) {
		return nil, false
	}
	return o.IsDeactivated, true
}

// HasIsDeactivated returns a boolean if a field has been set.
func (o *Driver) HasIsDeactivated() bool {
	if o != nil && !IsNil(o.IsDeactivated) {
		return true
	}

	return false
}

// SetIsDeactivated gets a reference to the given bool and assigns it to the IsDeactivated field.
func (o *Driver) SetIsDeactivated(v bool) {
	o.IsDeactivated = &v
}

// GetLicenseNumber returns the LicenseNumber field value if set, zero value otherwise.
func (o *Driver) GetLicenseNumber() string {
	if o == nil || IsNil(o.LicenseNumber) {
		var ret string
		return ret
	}
	return *o.LicenseNumber
}

// GetLicenseNumberOk returns a tuple with the LicenseNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetLicenseNumberOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseNumber) {
		return nil, false
	}
	return o.LicenseNumber, true
}

// HasLicenseNumber returns a boolean if a field has been set.
func (o *Driver) HasLicenseNumber() bool {
	if o != nil && !IsNil(o.LicenseNumber) {
		return true
	}

	return false
}

// SetLicenseNumber gets a reference to the given string and assigns it to the LicenseNumber field.
func (o *Driver) SetLicenseNumber(v string) {
	o.LicenseNumber = &v
}

// GetLicenseState returns the LicenseState field value if set, zero value otherwise.
func (o *Driver) GetLicenseState() string {
	if o == nil || IsNil(o.LicenseState) {
		var ret string
		return ret
	}
	return *o.LicenseState
}

// GetLicenseStateOk returns a tuple with the LicenseState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetLicenseStateOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseState) {
		return nil, false
	}
	return o.LicenseState, true
}

// HasLicenseState returns a boolean if a field has been set.
func (o *Driver) HasLicenseState() bool {
	if o != nil && !IsNil(o.LicenseState) {
		return true
	}

	return false
}

// SetLicenseState gets a reference to the given string and assigns it to the LicenseState field.
func (o *Driver) SetLicenseState(v string) {
	o.LicenseState = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *Driver) GetLocale() DriverLocale {
	if o == nil || IsNil(o.Locale) {
		var ret DriverLocale
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetLocaleOk() (*DriverLocale, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *Driver) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given DriverLocale and assigns it to the Locale field.
func (o *Driver) SetLocale(v DriverLocale) {
	o.Locale = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Driver) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Driver) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Driver) SetName(v string) {
	o.Name = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Driver) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Driver) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Driver) SetNotes(v string) {
	o.Notes = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *Driver) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *Driver) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *Driver) SetPhone(v string) {
	o.Phone = &v
}

// GetStaticAssignedVehicle returns the StaticAssignedVehicle field value if set, zero value otherwise.
func (o *Driver) GetStaticAssignedVehicle() DriverStaticAssignedVehicle {
	if o == nil || IsNil(o.StaticAssignedVehicle) {
		var ret DriverStaticAssignedVehicle
		return ret
	}
	return *o.StaticAssignedVehicle
}

// GetStaticAssignedVehicleOk returns a tuple with the StaticAssignedVehicle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetStaticAssignedVehicleOk() (*DriverStaticAssignedVehicle, bool) {
	if o == nil || IsNil(o.StaticAssignedVehicle) {
		return nil, false
	}
	return o.StaticAssignedVehicle, true
}

// HasStaticAssignedVehicle returns a boolean if a field has been set.
func (o *Driver) HasStaticAssignedVehicle() bool {
	if o != nil && !IsNil(o.StaticAssignedVehicle) {
		return true
	}

	return false
}

// SetStaticAssignedVehicle gets a reference to the given DriverStaticAssignedVehicle and assigns it to the StaticAssignedVehicle field.
func (o *Driver) SetStaticAssignedVehicle(v DriverStaticAssignedVehicle) {
	o.StaticAssignedVehicle = &v
}

// GetTachographCardNumber returns the TachographCardNumber field value if set, zero value otherwise.
func (o *Driver) GetTachographCardNumber() string {
	if o == nil || IsNil(o.TachographCardNumber) {
		var ret string
		return ret
	}
	return *o.TachographCardNumber
}

// GetTachographCardNumberOk returns a tuple with the TachographCardNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetTachographCardNumberOk() (*string, bool) {
	if o == nil || IsNil(o.TachographCardNumber) {
		return nil, false
	}
	return o.TachographCardNumber, true
}

// HasTachographCardNumber returns a boolean if a field has been set.
func (o *Driver) HasTachographCardNumber() bool {
	if o != nil && !IsNil(o.TachographCardNumber) {
		return true
	}

	return false
}

// SetTachographCardNumber gets a reference to the given string and assigns it to the TachographCardNumber field.
func (o *Driver) SetTachographCardNumber(v string) {
	o.TachographCardNumber = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Driver) GetTags() []TagTinyResponse {
	if o == nil || IsNil(o.Tags) {
		var ret []TagTinyResponse
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetTagsOk() ([]TagTinyResponse, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Driver) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagTinyResponse and assigns it to the Tags field.
func (o *Driver) SetTags(v []TagTinyResponse) {
	o.Tags = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *Driver) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *Driver) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *Driver) SetTimezone(v string) {
	o.Timezone = &v
}

// GetUpdatedAtTime returns the UpdatedAtTime field value if set, zero value otherwise.
func (o *Driver) GetUpdatedAtTime() time.Time {
	if o == nil || IsNil(o.UpdatedAtTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAtTime
}

// GetUpdatedAtTimeOk returns a tuple with the UpdatedAtTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetUpdatedAtTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAtTime) {
		return nil, false
	}
	return o.UpdatedAtTime, true
}

// HasUpdatedAtTime returns a boolean if a field has been set.
func (o *Driver) HasUpdatedAtTime() bool {
	if o != nil && !IsNil(o.UpdatedAtTime) {
		return true
	}

	return false
}

// SetUpdatedAtTime gets a reference to the given time.Time and assigns it to the UpdatedAtTime field.
func (o *Driver) SetUpdatedAtTime(v time.Time) {
	o.UpdatedAtTime = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Driver) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Driver) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Driver) SetUsername(v string) {
	o.Username = &v
}

// GetVehicleGroupTag returns the VehicleGroupTag field value if set, zero value otherwise.
func (o *Driver) GetVehicleGroupTag() DriverVehicleGroupTag {
	if o == nil || IsNil(o.VehicleGroupTag) {
		var ret DriverVehicleGroupTag
		return ret
	}
	return *o.VehicleGroupTag
}

// GetVehicleGroupTagOk returns a tuple with the VehicleGroupTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetVehicleGroupTagOk() (*DriverVehicleGroupTag, bool) {
	if o == nil || IsNil(o.VehicleGroupTag) {
		return nil, false
	}
	return o.VehicleGroupTag, true
}

// HasVehicleGroupTag returns a boolean if a field has been set.
func (o *Driver) HasVehicleGroupTag() bool {
	if o != nil && !IsNil(o.VehicleGroupTag) {
		return true
	}

	return false
}

// SetVehicleGroupTag gets a reference to the given DriverVehicleGroupTag and assigns it to the VehicleGroupTag field.
func (o *Driver) SetVehicleGroupTag(v DriverVehicleGroupTag) {
	o.VehicleGroupTag = &v
}

func (o Driver) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Driver) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CarrierSettings) {
		toSerialize["carrierSettings"] = o.CarrierSettings
	}
	if !IsNil(o.CreatedAtTime) {
		toSerialize["createdAtTime"] = o.CreatedAtTime
	}
	if !IsNil(o.EldAdverseWeatherExemptionEnabled) {
		toSerialize["eldAdverseWeatherExemptionEnabled"] = o.EldAdverseWeatherExemptionEnabled
	}
	if !IsNil(o.EldBigDayExemptionEnabled) {
		toSerialize["eldBigDayExemptionEnabled"] = o.EldBigDayExemptionEnabled
	}
	if !IsNil(o.EldDayStartHour) {
		toSerialize["eldDayStartHour"] = o.EldDayStartHour
	}
	if !IsNil(o.EldExempt) {
		toSerialize["eldExempt"] = o.EldExempt
	}
	if !IsNil(o.EldExemptReason) {
		toSerialize["eldExemptReason"] = o.EldExemptReason
	}
	if !IsNil(o.EldPcEnabled) {
		toSerialize["eldPcEnabled"] = o.EldPcEnabled
	}
	if !IsNil(o.EldYmEnabled) {
		toSerialize["eldYmEnabled"] = o.EldYmEnabled
	}
	if !IsNil(o.ExternalIds) {
		toSerialize["externalIds"] = o.ExternalIds
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsDeactivated) {
		toSerialize["isDeactivated"] = o.IsDeactivated
	}
	if !IsNil(o.LicenseNumber) {
		toSerialize["licenseNumber"] = o.LicenseNumber
	}
	if !IsNil(o.LicenseState) {
		toSerialize["licenseState"] = o.LicenseState
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.StaticAssignedVehicle) {
		toSerialize["staticAssignedVehicle"] = o.StaticAssignedVehicle
	}
	if !IsNil(o.TachographCardNumber) {
		toSerialize["tachographCardNumber"] = o.TachographCardNumber
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.UpdatedAtTime) {
		toSerialize["updatedAtTime"] = o.UpdatedAtTime
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.VehicleGroupTag) {
		toSerialize["vehicleGroupTag"] = o.VehicleGroupTag
	}
	return toSerialize, nil
}

type NullableDriver struct {
	value *Driver
	isSet bool
}

func (v NullableDriver) Get() *Driver {
	return v.value
}

func (v *NullableDriver) Set(val *Driver) {
	v.value = val
	v.isSet = true
}

func (v NullableDriver) IsSet() bool {
	return v.isSet
}

func (v *NullableDriver) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDriver(val *Driver) *NullableDriver {
	return &NullableDriver{value: val, isSet: true}
}

func (v NullableDriver) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDriver) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


