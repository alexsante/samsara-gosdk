/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package samsarago

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateAddressRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAddressRequest{}

// CreateAddressRequest A request body to create an Address.
type CreateAddressRequest struct {
	// Reporting location type associated with the address (used for ELD reporting purposes).
	AddressTypes []string `json:"addressTypes,omitempty"`
	// An array of Contact IDs associated with this Address.
	ContactIds []string `json:"contactIds,omitempty"`
	// The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
	ExternalIds *map[string]string `json:"externalIds,omitempty"`
	// The full street address for this address/geofence, as it might be recognized by Google Maps.
	FormattedAddress string `json:"formattedAddress"`
	Geofence AddressGeofence `json:"geofence"`
	// Latitude of the address. Will be geocoded from `formattedAddress` if not provided.
	Latitude *float64 `json:"latitude,omitempty"`
	// Longitude of the address. Will be geocoded from `formattedAddress` if not provided.
	Longitude *float64 `json:"longitude,omitempty"`
	// Name of the address.
	Name string `json:"name"`
	// Notes about the address.
	Notes *string `json:"notes,omitempty"`
	// An array of IDs of tags to associate with this address.
	TagIds []string `json:"tagIds,omitempty"`
}

type _CreateAddressRequest CreateAddressRequest

// NewCreateAddressRequest instantiates a new CreateAddressRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAddressRequest(formattedAddress string, geofence AddressGeofence, name string) *CreateAddressRequest {
	this := CreateAddressRequest{}
	this.FormattedAddress = formattedAddress
	this.Geofence = geofence
	this.Name = name
	return &this
}

// NewCreateAddressRequestWithDefaults instantiates a new CreateAddressRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAddressRequestWithDefaults() *CreateAddressRequest {
	this := CreateAddressRequest{}
	return &this
}

// GetAddressTypes returns the AddressTypes field value if set, zero value otherwise.
func (o *CreateAddressRequest) GetAddressTypes() []string {
	if o == nil || IsNil(o.AddressTypes) {
		var ret []string
		return ret
	}
	return o.AddressTypes
}

// GetAddressTypesOk returns a tuple with the AddressTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAddressRequest) GetAddressTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.AddressTypes) {
		return nil, false
	}
	return o.AddressTypes, true
}

// HasAddressTypes returns a boolean if a field has been set.
func (o *CreateAddressRequest) HasAddressTypes() bool {
	if o != nil && !IsNil(o.AddressTypes) {
		return true
	}

	return false
}

// SetAddressTypes gets a reference to the given []string and assigns it to the AddressTypes field.
func (o *CreateAddressRequest) SetAddressTypes(v []string) {
	o.AddressTypes = v
}

// GetContactIds returns the ContactIds field value if set, zero value otherwise.
func (o *CreateAddressRequest) GetContactIds() []string {
	if o == nil || IsNil(o.ContactIds) {
		var ret []string
		return ret
	}
	return o.ContactIds
}

// GetContactIdsOk returns a tuple with the ContactIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAddressRequest) GetContactIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ContactIds) {
		return nil, false
	}
	return o.ContactIds, true
}

// HasContactIds returns a boolean if a field has been set.
func (o *CreateAddressRequest) HasContactIds() bool {
	if o != nil && !IsNil(o.ContactIds) {
		return true
	}

	return false
}

// SetContactIds gets a reference to the given []string and assigns it to the ContactIds field.
func (o *CreateAddressRequest) SetContactIds(v []string) {
	o.ContactIds = v
}

// GetExternalIds returns the ExternalIds field value if set, zero value otherwise.
func (o *CreateAddressRequest) GetExternalIds() map[string]string {
	if o == nil || IsNil(o.ExternalIds) {
		var ret map[string]string
		return ret
	}
	return *o.ExternalIds
}

// GetExternalIdsOk returns a tuple with the ExternalIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAddressRequest) GetExternalIdsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ExternalIds) {
		return nil, false
	}
	return o.ExternalIds, true
}

// HasExternalIds returns a boolean if a field has been set.
func (o *CreateAddressRequest) HasExternalIds() bool {
	if o != nil && !IsNil(o.ExternalIds) {
		return true
	}

	return false
}

// SetExternalIds gets a reference to the given map[string]string and assigns it to the ExternalIds field.
func (o *CreateAddressRequest) SetExternalIds(v map[string]string) {
	o.ExternalIds = &v
}

// GetFormattedAddress returns the FormattedAddress field value
func (o *CreateAddressRequest) GetFormattedAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FormattedAddress
}

// GetFormattedAddressOk returns a tuple with the FormattedAddress field value
// and a boolean to check if the value has been set.
func (o *CreateAddressRequest) GetFormattedAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FormattedAddress, true
}

// SetFormattedAddress sets field value
func (o *CreateAddressRequest) SetFormattedAddress(v string) {
	o.FormattedAddress = v
}

// GetGeofence returns the Geofence field value
func (o *CreateAddressRequest) GetGeofence() AddressGeofence {
	if o == nil {
		var ret AddressGeofence
		return ret
	}

	return o.Geofence
}

// GetGeofenceOk returns a tuple with the Geofence field value
// and a boolean to check if the value has been set.
func (o *CreateAddressRequest) GetGeofenceOk() (*AddressGeofence, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Geofence, true
}

// SetGeofence sets field value
func (o *CreateAddressRequest) SetGeofence(v AddressGeofence) {
	o.Geofence = v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *CreateAddressRequest) GetLatitude() float64 {
	if o == nil || IsNil(o.Latitude) {
		var ret float64
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAddressRequest) GetLatitudeOk() (*float64, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *CreateAddressRequest) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float64 and assigns it to the Latitude field.
func (o *CreateAddressRequest) SetLatitude(v float64) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *CreateAddressRequest) GetLongitude() float64 {
	if o == nil || IsNil(o.Longitude) {
		var ret float64
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAddressRequest) GetLongitudeOk() (*float64, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *CreateAddressRequest) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float64 and assigns it to the Longitude field.
func (o *CreateAddressRequest) SetLongitude(v float64) {
	o.Longitude = &v
}

// GetName returns the Name field value
func (o *CreateAddressRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateAddressRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateAddressRequest) SetName(v string) {
	o.Name = v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *CreateAddressRequest) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAddressRequest) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *CreateAddressRequest) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *CreateAddressRequest) SetNotes(v string) {
	o.Notes = &v
}

// GetTagIds returns the TagIds field value if set, zero value otherwise.
func (o *CreateAddressRequest) GetTagIds() []string {
	if o == nil || IsNil(o.TagIds) {
		var ret []string
		return ret
	}
	return o.TagIds
}

// GetTagIdsOk returns a tuple with the TagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAddressRequest) GetTagIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TagIds) {
		return nil, false
	}
	return o.TagIds, true
}

// HasTagIds returns a boolean if a field has been set.
func (o *CreateAddressRequest) HasTagIds() bool {
	if o != nil && !IsNil(o.TagIds) {
		return true
	}

	return false
}

// SetTagIds gets a reference to the given []string and assigns it to the TagIds field.
func (o *CreateAddressRequest) SetTagIds(v []string) {
	o.TagIds = v
}

func (o CreateAddressRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAddressRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddressTypes) {
		toSerialize["addressTypes"] = o.AddressTypes
	}
	if !IsNil(o.ContactIds) {
		toSerialize["contactIds"] = o.ContactIds
	}
	if !IsNil(o.ExternalIds) {
		toSerialize["externalIds"] = o.ExternalIds
	}
	toSerialize["formattedAddress"] = o.FormattedAddress
	toSerialize["geofence"] = o.Geofence
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.TagIds) {
		toSerialize["tagIds"] = o.TagIds
	}
	return toSerialize, nil
}

func (o *CreateAddressRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"formattedAddress",
		"geofence",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAddressRequest := _CreateAddressRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateAddressRequest)

	if err != nil {
		return err
	}

	*o = CreateAddressRequest(varCreateAddressRequest)

	return err
}

type NullableCreateAddressRequest struct {
	value *CreateAddressRequest
	isSet bool
}

func (v NullableCreateAddressRequest) Get() *CreateAddressRequest {
	return v.value
}

func (v *NullableCreateAddressRequest) Set(val *CreateAddressRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAddressRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAddressRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAddressRequest(val *CreateAddressRequest) *NullableCreateAddressRequest {
	return &NullableCreateAddressRequest{value: val, isSet: true}
}

func (v NullableCreateAddressRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAddressRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


