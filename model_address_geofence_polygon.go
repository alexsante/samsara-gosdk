/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddressGeofencePolygon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressGeofencePolygon{}

// AddressGeofencePolygon Information about a polygon geofence. This field is only needed if the geofence is a polygon.
type AddressGeofencePolygon struct {
	// The vertices of the polygon geofence. These geofence vertices describe the perimeter of the polygon, and must consist of at least 3 vertices and less than 40.
	Vertices []AddressGeofencePolygonVerticesInner `json:"vertices"`
}

type _AddressGeofencePolygon AddressGeofencePolygon

// NewAddressGeofencePolygon instantiates a new AddressGeofencePolygon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressGeofencePolygon(vertices []AddressGeofencePolygonVerticesInner) *AddressGeofencePolygon {
	this := AddressGeofencePolygon{}
	this.Vertices = vertices
	return &this
}

// NewAddressGeofencePolygonWithDefaults instantiates a new AddressGeofencePolygon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressGeofencePolygonWithDefaults() *AddressGeofencePolygon {
	this := AddressGeofencePolygon{}
	return &this
}

// GetVertices returns the Vertices field value
func (o *AddressGeofencePolygon) GetVertices() []AddressGeofencePolygonVerticesInner {
	if o == nil {
		var ret []AddressGeofencePolygonVerticesInner
		return ret
	}

	return o.Vertices
}

// GetVerticesOk returns a tuple with the Vertices field value
// and a boolean to check if the value has been set.
func (o *AddressGeofencePolygon) GetVerticesOk() ([]AddressGeofencePolygonVerticesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vertices, true
}

// SetVertices sets field value
func (o *AddressGeofencePolygon) SetVertices(v []AddressGeofencePolygonVerticesInner) {
	o.Vertices = v
}

func (o AddressGeofencePolygon) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressGeofencePolygon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vertices"] = o.Vertices
	return toSerialize, nil
}

func (o *AddressGeofencePolygon) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vertices",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressGeofencePolygon := _AddressGeofencePolygon{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressGeofencePolygon)

	if err != nil {
		return err
	}

	*o = AddressGeofencePolygon(varAddressGeofencePolygon)

	return err
}

type NullableAddressGeofencePolygon struct {
	value *AddressGeofencePolygon
	isSet bool
}

func (v NullableAddressGeofencePolygon) Get() *AddressGeofencePolygon {
	return v.value
}

func (v *NullableAddressGeofencePolygon) Set(val *AddressGeofencePolygon) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressGeofencePolygon) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressGeofencePolygon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressGeofencePolygon(val *AddressGeofencePolygon) *NullableAddressGeofencePolygon {
	return &NullableAddressGeofencePolygon{value: val, isSet: true}
}

func (v NullableAddressGeofencePolygon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressGeofencePolygon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


