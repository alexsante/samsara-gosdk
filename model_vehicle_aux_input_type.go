/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package samsarago

import (
	"encoding/json"
	"fmt"
)

// VehicleAuxInputType The type of [auxiliary input](https://kb.samsara.com/hc/en-us/articles/232232368-Auxiliary-Inputs) configured for this Vehicle. Once configured, these inputs will generate dynamic, time-series data that will be available to view in the Samsara Dashboard. **By default**: empty. This can be set or updated through the Samsara Dashboard or the API at any time.
type VehicleAuxInputType string

// List of VehicleAuxInputType
const (
	NONE VehicleAuxInputType = "none"
	EMERGENCY_LIGHTS VehicleAuxInputType = "emergencyLights"
	EMERGENCY_ALARM VehicleAuxInputType = "emergencyAlarm"
	STOP_PADDLE VehicleAuxInputType = "stopPaddle"
	POWER_TAKE_OFF VehicleAuxInputType = "powerTakeOff"
	PLOW VehicleAuxInputType = "plow"
	SWEEPER VehicleAuxInputType = "sweeper"
	SALTER VehicleAuxInputType = "salter"
	REEFER VehicleAuxInputType = "reefer"
	DOOR VehicleAuxInputType = "door"
	BOOM VehicleAuxInputType = "boom"
	AUXILIARY_ENGINE VehicleAuxInputType = "auxiliaryEngine"
	GENERATOR VehicleAuxInputType = "generator"
	EIGHT_WAY_LIGHTS VehicleAuxInputType = "eightWayLights"
)

// All allowed values of VehicleAuxInputType enum
var AllowedVehicleAuxInputTypeEnumValues = []VehicleAuxInputType{
	"none",
	"emergencyLights",
	"emergencyAlarm",
	"stopPaddle",
	"powerTakeOff",
	"plow",
	"sweeper",
	"salter",
	"reefer",
	"door",
	"boom",
	"auxiliaryEngine",
	"generator",
	"eightWayLights",
}

func (v *VehicleAuxInputType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VehicleAuxInputType(value)
	for _, existing := range AllowedVehicleAuxInputTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VehicleAuxInputType", value)
}

// NewVehicleAuxInputTypeFromValue returns a pointer to a valid VehicleAuxInputType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVehicleAuxInputTypeFromValue(v string) (*VehicleAuxInputType, error) {
	ev := VehicleAuxInputType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VehicleAuxInputType: valid values are %v", v, AllowedVehicleAuxInputTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VehicleAuxInputType) IsValid() bool {
	for _, existing := range AllowedVehicleAuxInputTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VehicleAuxInputType value
func (v VehicleAuxInputType) Ptr() *VehicleAuxInputType {
	return &v
}

type NullableVehicleAuxInputType struct {
	value *VehicleAuxInputType
	isSet bool
}

func (v NullableVehicleAuxInputType) Get() *VehicleAuxInputType {
	return v.value
}

func (v *NullableVehicleAuxInputType) Set(val *VehicleAuxInputType) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicleAuxInputType) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicleAuxInputType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicleAuxInputType(val *VehicleAuxInputType) *NullableVehicleAuxInputType {
	return &NullableVehicleAuxInputType{value: val, isSet: true}
}

func (v NullableVehicleAuxInputType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicleAuxInputType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

