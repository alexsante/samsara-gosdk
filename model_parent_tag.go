/*
Samsara API

Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.

API version: 2019-12-12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package samsarago

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParentTag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParentTag{}

// ParentTag If this tag is part a hierarchical tag tree, this is the parent tag, otherwise this will be omitted.
type ParentTag struct {
	// The object ID.
	Id string `json:"id"`
	// The tag name.
	Name *string `json:"name,omitempty"`
}

type _ParentTag ParentTag

// NewParentTag instantiates a new ParentTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParentTag(id string) *ParentTag {
	this := ParentTag{}
	this.Id = id
	return &this
}

// NewParentTagWithDefaults instantiates a new ParentTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParentTagWithDefaults() *ParentTag {
	this := ParentTag{}
	return &this
}

// GetId returns the Id field value
func (o *ParentTag) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ParentTag) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ParentTag) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ParentTag) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentTag) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ParentTag) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ParentTag) SetName(v string) {
	o.Name = &v
}

func (o ParentTag) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParentTag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

func (o *ParentTag) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParentTag := _ParentTag{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParentTag)

	if err != nil {
		return err
	}

	*o = ParentTag(varParentTag)

	return err
}

type NullableParentTag struct {
	value *ParentTag
	isSet bool
}

func (v NullableParentTag) Get() *ParentTag {
	return v.value
}

func (v *NullableParentTag) Set(val *ParentTag) {
	v.value = val
	v.isSet = true
}

func (v NullableParentTag) IsSet() bool {
	return v.isSet
}

func (v *NullableParentTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParentTag(val *ParentTag) *NullableParentTag {
	return &NullableParentTag{value: val, isSet: true}
}

func (v NullableParentTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParentTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


